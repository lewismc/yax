<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
   <articleinfo>
      <title>
         <phrase lang="en"> yax - an XProc (XML Pipeline) Implementation</phrase>
         
      </title>
      <mediaobject>
         <imageobject>
            <imagedata fileref="figures/yax-logo-large.gif" scale="30" format="GIF"/>
         </imageobject>
      </mediaobject>
      <author>
         <firstname>Joerg</firstname>
         <surname>Moebius</surname>
      </author>
      <copyright>
         <year>2006</year>
         <year>2007</year>
         <year>2008</year>
         <holder>joerg.moebius@opsdesign.de</holder>
      </copyright>
      <releaseinfo>
         <remark>
            <phrase lang="en"> description under construction </phrase>
            
         </remark>
      </releaseinfo>
      <legalnotice>
         <para lang="en"> Software and documentation is released under the terms of the <ulink url="http://www.gnu.org/copyleft/lesser.html">
               <citetitle>GNU LGPL license</citetitle>
            </ulink> and comes without a warranty of any kind. </para>
         
      </legalnotice>
      <pubdate>2008-03-03</pubdate>
      <revhistory id="revisions">
         <revision id="revision-0.11.0">
            <revnumber>0.11.0</revnumber>
            <date>2008-03-03</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
            	<para>see Change Log.</para>
            </revdescription>
         </revision>
         <revision id="revision-0.10">
            <revnumber>0.10</revnumber>
            <date>2008-03-03</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
            	<para>Release 0.10 skipped.</para>
            </revdescription>
         </revision>
         <revision id="revision-0.9">
            <revnumber>0.9</revnumber>
            <date>2007-02-08</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
               <itemizedlist>
                  <title>how to obtain and install?</title>
                  <para> you can find the complete documentation </para>
                  <listitem>
                     <para>in the installation directory in the subdirectory 'doc/build'</para>
                  </listitem>
                  <listitem>
                     <para>or at <ulink url="http://yax.sourceforge.net">http://yax.sourceforge.net</ulink>
                     </para>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>what's new</title>
                  <listitem>
                     <para>list of news</para>
                     <itemizedlist>
                        <title>steps</title>
                        <listitem>
                           <para>FOP (creates PDF files) created.</para>
                        </listitem>
                        <listitem>
                           <para>PDF (currently ident with FOP) created.</para>
                        </listitem>
                        <listitem>
                           <para>XSLT: now xml catalog aware</para>
                        </listitem>
                        <listitem>
                           <para>XInclude: now xml catalog aware</para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>container</title>
                        <listitem>
                           <para/>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>others</title>
                        <listitem>
                           <para>
                            xml catalog awareness (by using Norman Walsh's xml commons resolver) 
                           </para>
                           <para>
                            adapter for apache's commons logger (due to FOP)
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                            examples revised / extended. 
                           </para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>documentation</title>
                        <listitem>
                           <para>
                           </para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>known issues</title>
                  <para>This is an early release. If you expect everything to work perfectly, you
                     will surely be let down. This list covers some of the known issues. If you
                     figure out other issues (feature request and/or Bugs) please report it to the
                     project site.</para>
                  <listitem>
                     <para>implementation of soap interface</para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
         <revision id="revision-0.8">
            <revnumber>0.8</revnumber>
            <date>2007-01-31</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
               <itemizedlist>
                  <title>how to obtain and install?</title>
                  <para> you can find the complete documentation </para>
                  <listitem>
                     <para>in the installation directory in the subdirectory 'doc/build'</para>
                  </listitem>
                  <listitem>
                     <para>or at <ulink url="http://yax.sourceforge.net">http://yax.sourceforge.net</ulink>
                     </para>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>what's new</title>
                  <listitem>
                     <para>list of news</para>
                     <itemizedlist>
                        <title>steps</title>
                        <listitem>
                           <para>steps (especially XSLT, Load, Store) stabilized.</para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>container</title>
                        <listitem>
                           <para>container (especially try,choose) stabilized.</para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>others</title>
                        <listitem>
                           <para>
                            ant interface created.
                           </para>
                           <para>
                            yax can be used as an ant task and provides nested fileset feature.
                            (applying a script an multiple input documents)
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                            logger system created. 
                           </para>
                           <para>
                            Log4jLogger is default. 
                            ConsoleLogger is used when Log4jLogger is not available / not desired.
                            in ant mode all Loggings are redirected to ant. 
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                            some new preferences (see preferences.xml) created. 
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                            examples revised / extended. 
                           </para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>documentation</title>
                        <listitem>
                           <para>
                           </para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>known issues</title>
                  <para>This is an early release. If you expect everything to work perfectly, you
                     will surely be let down. This list covers some of the known issues. If you
                     figure out other issues (feature request and/or Bugs) please report it to the
                     project site.</para>
                  <listitem>
                     <para>implementation of soap interface</para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
         <revision id="revision-0.7">
            <revnumber>0.7</revnumber>
            <date>2007-01-13</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
               <itemizedlist>
                  <title>what's new</title>
                  <listitem>
                     <para>
                      Problem with 
                     </para>
                     <para>
                      Error message : net.sf.yax.types not valid
                     </para>
                     <para>
                      configuration exception : net.sf.yax.types does not appear to be a valid package
                     </para>
                     <para>
                      is solved. 
                     </para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
         <revision id="revision-0.6">
            <revnumber>0.6</revnumber>
            <date>2007-01-11</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
               <itemizedlist>
                  <title>what's new</title>
                  <listitem>
                     <para>
                      Release 0.6 has the same content as release 0.5.
                      It is launched due to a corrupted zip file in release 0.5. 
                     </para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
         <revision id="revision-0.5">
            <revnumber>0.5</revnumber>
            <date>2007-01-11</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
               <itemizedlist>
                  <title>how to obtain and install?</title>
                  <para> you can find the complete documentation </para>
                  <listitem>
                     <para>in the installation directory in the subdirectory 'doc/build'</para>
                  </listitem>
                  <listitem>
                     <para>or at <ulink url="http://yax.sourceforge.net">http://yax.sourceforge.net</ulink>
                     </para>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>what's new</title>
                  <listitem>
                     <para>list of news</para>
                     <itemizedlist>
                        <title>steps</title>
                        <listitem>
                           <para>XInclude created.</para>
                        </listitem>
                        <listitem>
                           <para>Load created.</para>
                        </listitem>
                        <listitem>
                           <para>Store created.</para>
                        </listitem>
                        <listitem>
                           <para>XSLT parameter passing implemented.</para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>constructs</title>
                        <listitem>
                           <para/>
                           <para/>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>others</title>
                        <listitem>
                           <para>
                            run without passing input and output document location (run with Load and Store)
                           </para>
                           <para>
                            baseUri as (possible) base for all location related operations. 
                           </para>
                           <para>
                            properties / property files implemented.
                           </para>
                           <para>
                            first attempt of an expression language implemented.
                           </para>
                           <para>
                            preferences extended.
                           </para>
                           <para/>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>documentation</title>
                        <listitem>
                           <para>section 'using XInclude...' created.</para>
                        </listitem>
                        <listitem>
                           <para>section 'using Load...' created.</para>
                        </listitem>
                        <listitem>
                           <para>section 'using Load...' created.</para>
                        </listitem>
                        <listitem>
                           <para>sections 'Configuration...' and 'Usage...' revised and extended.</para>
                        </listitem>
                        <listitem>
                           <para>Feature, status table actualized and revised.</para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>known issues</title>
                  <para>This is an early release. If you expect everything to work perfectly, you
                     will surely be let down. This list covers some of the known issues. If you
                     figure out other issues (feature request and/or Bugs) please report it to the
                     project site.</para>
                  <listitem>
                     <para>implemenation of all constructs and steps</para>
                  </listitem>
                  <listitem>
                     <para>implementation of interfaces</para>
                  </listitem>
                  <listitem>
                     <para>implementation of infrastructur</para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
         <revision id="revision-0.4">
            <revnumber>0.4</revnumber>
            <date>2007-01-07</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
               <itemizedlist>
                  <title>how to obtain and install?</title>
                  <para> you can find the complete documentation </para>
                  <listitem>
                     <para>in the installation directory in the subdirectory 'doc/build'</para>
                  </listitem>
                  <listitem>
                     <para>or at <ulink url="http://yax.sourceforge.net">http://yax.sourceforge.net</ulink>
                     </para>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>what's new</title>
                  <listitem>
                     <para>list of news</para>
                     <itemizedlist>
                        <title>steps</title>
                        <listitem>
                           <para>XSLT</para>
                           <para>messages of transformer resolving revised.</para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>constructs</title>
                        <listitem>
                           <para>Choose/When/Otherwise</para>
                           <para>implemented.</para>
                        </listitem>
                        <listitem>
                           <para>Try/Group/Catch</para>
                           <para>implemented.</para>
                        </listitem>
                        <listitem>
                           <para>bridging of empty constructs</para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>others</title>
                        <listitem>
                           <para>extension mechanism</para>
                           <para>built-in components now in a jar</para>
                           <para>seeking for custom components in the directory named custom</para>
                        </listitem>
                        <listitem>
                           <para>preferences redesigned</para>
                        </listitem>
                        <listitem>
                           <para>several new preferences (see preferences file)</para>
                        </listitem>
                        <listitem>
                           <para>pipe trace graph now differenciates between implicit and explicit ports and connections</para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>documentation</title>
                        <listitem>
                           <para>section 'using pipeline' created</para>
                        </listitem>
                        <listitem>
                           <para>section 'using XSLT' created</para>
                        </listitem>
                        <listitem>
                           <para>section 'using Choose/When/Otherwise' created</para>
                        </listitem>
                        <listitem>
                           <para>section 'using Try/Group/Catch' created</para>
                        </listitem>
                        <listitem>
                           <para>section 'approach/extension mechanism' created</para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>known issues</title>
                  <para>This is an early release. If you expect everything to work perfectly, you
                     will surely be let down. This list covers some of the known issues. If you
                     figure out other issues (feature request and/or Bugs) please report it to the
                     project site.</para>
                  <listitem>
                     <para>implemenation of all constructs and steps</para>
                  </listitem>
                  <listitem>
                     <para>implementation of interfaces</para>
                  </listitem>
                  <listitem>
                     <para>implementation of infrastructur</para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
         <revision id="revision-0.3">
            <revnumber>0.3</revnumber>
            <date>2007-01-03</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
               <itemizedlist>
                  <title>how to obtain and install?</title>
                  <para> you can find the complete documentation </para>
                  <listitem>
                     <para>in the installation directory in the subdirectory 'doc/build'</para>
                  </listitem>
                  <listitem>
                     <para>or at <ulink url="http://yax.sourceforge.net">http://yax.sourceforge.net</ulink>
                     </para>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>what's new</title>
                  <listitem>
                     <para>list of news</para>
                     <itemizedlist>
                        <title>steps</title>
                        <listitem>
                           <para>Validate</para>
                           <para>set to interims implementation</para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>constructs</title>
                        <listitem>
                           <para/>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>others</title>
                        <listitem>
                           <para>output of pipelineConfig now analog traces.</para>
                        </listitem>
                        <listitem>
                           <para>automaticOutput of pipeTrace and portTrace know considered by application.</para>
                        </listitem>
                     </itemizedlist>
                     <itemizedlist>
                        <title>documentation</title>
                        <listitem>
                           <para>revised and extended</para>
                           <para>sections 'status', 'approach' revised.</para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>known issues</title>
                  <para>This is an early release. If you expect everything to work perfectly, you
                     will surely be let down. This list covers some of the known issues. If you
                     figure out other issues (feature request and/or Bugs) please report it to the
                     project site.</para>
                  <listitem>
                     <para>implemenation of all constructs and steps</para>
                  </listitem>
                  <listitem>
                     <para>implementation of interfaces</para>
                  </listitem>
                  <listitem>
                     <para>implementation of infrastructur</para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
         <revision id="revision-0.2">
            <revnumber>0.2</revnumber>
            <date>2007-01-01</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
               <itemizedlist>
                  <title>how to obtain and install?</title>
                  <para> you can find the complete documentation </para>
                  <listitem>
                     <para>in the installation directory in the subdirectory 'doc/build'</para>
                  </listitem>
                  <listitem>
                     <para>or at <ulink url="http://yax.sourceforge.net">http://yax.sourceforge.net</ulink>
                     </para>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>what's new</title>
                  <listitem>
                     <para>list of news</para>
                     <itemizedlist>
                        <listitem>
                           <para>documentation revised and extended</para>
                           <para>sections 'what is', 'status', 'quick start' revised.</para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>known issues</title>
                  <para>This is an early release. If you expect everything to work perfectly, you
                     will surely be let down. This list covers some of the known issues. If you
                     figure out other issues (feature request and/or Bugs) please report it to the
                     project site.</para>
                  <listitem>
                     <para>implemenation of all constructs and steps</para>
                  </listitem>
                  <listitem>
                     <para>implementation of interfaces</para>
                  </listitem>
                  <listitem>
                     <para>implementation of infrastructur</para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
         <revision id="revision-0.1">
            <revnumber>0.1</revnumber>
            <date>2006-12-31</date>
            <authorinitials>jmo</authorinitials>
            <revdescription>
               <itemizedlist>
                  <title>how to obtain an install?</title>
                  <para> you can find the complete documentation </para>
                  <listitem>
                     <para>in the installation directory in the subdirectory 'doc/build'</para>
                  </listitem>
                  <listitem>
                     <para>or at <ulink url="http://yax.sourceforge.net">http://yax.sourceforge.net</ulink>
                     </para>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>what's new</title>
                  <listitem>
                     <para>list of news</para>
                     <itemizedlist>
                        <listitem>
                           <para>first release</para>
                           <para>experimental release to give an impression.</para>
                        </listitem>
                     </itemizedlist>
                  </listitem>
               </itemizedlist>
               <itemizedlist>
                  <title>known issues</title>
                  <para>This is an early release. If you expect everything to work perfectly, you
                     will surely be let down. This list covers some of the known issues. If you
                     figure out other issues (feature request and/or Bugs) please report it to the
                     project site.</para>
                  <listitem>
                     <para>implemenation of all constructs and steps</para>
                  </listitem>
                  <listitem>
                     <para>implementation of interfaces</para>
                  </listitem>
                  <listitem>
                     <para>implementation of infrastructur</para>
                  </listitem>
               </itemizedlist>
            </revdescription>
         </revision>
      </revhistory>
   </articleinfo>
   <section id="what.is">
      <title id="what.is.title">
         <phrase lang="en">What is yax?</phrase>
         
      </title>
      <para lang="en">
         yax is an Java implementation of the XProc Specification, an XML Pipeline Language   
         (<ulink url="http://www.w3.org/TR/2006/WD-xproc-20061117/">XProc: An XML Pipeline Language W3C Working Draft 17 November 2006</ulink>). 
         yax processes XProc Scripts like:
      </para>
      
      <programlisting format="linespecific">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT" 
      yax:description="transforms 'a*' elements to 'b*' elmenents."&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans2" type="xproc:XSLT" 
      yax:description="transforms 'b*' elements to 'c*' elmenents."&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt;
      &lt;xproc:parameter name="transformer" value="Saxon6" /&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT" 
      yax:description="transforms 'c*' elements to 'd*' elmenents."&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
      &lt;xproc:parameter name="transformer" value="XSLTC" /&gt; 
   &lt;/xproc:step&gt;
&lt;/xproc:pipeline&gt;

            </programlisting>
   </section>
   <section id="quickStart">
      <title>
         <phrase lang="en">Quickstart</phrase>
         
      </title>
      <section id="quickstart.prerequisites">
         <title>
            <phrase lang="en">Prerequisites</phrase>
            
         </title>
         <para lang="en"> The following packages have to be available (installed):</para>
         
         <para>
            <itemizedlist>
               <listitem>
                  <para>
                     Java (Version 5 or above) 
                  </para>
               </listitem>
               <listitem>
                  <para>
                     <ulink url="http://www.graphviz.org/">Graphviz - Graph Visualization Software</ulink>, 
                  </para>
                  <para>
                     if want to use the visualisation features (pipeline trace, port trace).
                  </para>
               </listitem>
               <listitem>
                  <para>
                     further XSLT processors ( like saxon, xalan et al),
                  </para>
                  <para>
                     if you want to use other processor(s) than the one (XSLTC), which comes with java.
                  </para>
               </listitem>
            </itemizedlist>
         </para>
      </section>
      <section id="quickstart.installation">
         <title>Installation</title>
         <para lang="en"> Download yax from <ulink url="http://yax.sourceforge.net">http://yax.sourceforge.net</ulink>
            and unzip the file to an arbitrary <emphasis>&lt;yax-installation-directory&gt;</emphasis>.</para>
         
      </section>
      <section id="quickstart.configuration">
         <title>
            <phrase lang="en">Configuration</phrase>
            
         </title>
         <para lang="en"> 
            For the first run no special configurations are necessary. 
         </para>
         <para lang="en"> 
            If your environment still contains an installation of Graphviz you can set the <emphasis>automaticOutput</emphasis> 
            attribute of the <emphasis>&lt;pipetrace&gt;</emphasis> and the <emphasis>&lt;porttrace&gt;</emphasis> preference 
            within the preference file at <emphasis>&lt;yax-installation-directory&gt;</emphasis>/config/preferences.xml to 'yes'.
            Then you will get files containing the graphical representations of the pipeline. 
         </para>
      </section>
      <section id="quickstart.firstRun">
         <title>
            <phrase lang="en">First Run</phrase>
            
         </title>
         <para lang="en">
            On the command line change to the <emphasis>&lt;yax-installation-directory&gt;</emphasis>
            and start yax with:
         </para>
         <programlisting format="linespecific">
# java -classpath lib/yax-0.7.jar net.sf.yax.Yax examples/example1.xproc examples/example1.xml 
         </programlisting>
         <para lang="en">
            If all works well you will get a set of messages like the following. Which transformation
            processor appears in the messages depends on your actual environment configuration.
         </para>
         <programlisting format="linespecific">
            
default transformer is set to system transformer.
automaticOutput of pipe trace is set to 'yes'.
automaticOutput of port trace is set to 'yes'.
suppress of process is set to 'no'.
step 'trans1': transformer Apache Software Foundation (Xalan XSLTC)(Version 1.0) is used.
step 'trans2': transformer Apache Software Foundation (Xalan XSLTC)(Version 1.0) is used.
step 'trans3': transformer Apache Software Foundation (Xalan XSLTC)(Version 1.0) is used.
Yax run sucessful completed.
                        
         </programlisting>
         <para lang="en">
            This run generates several output file in the <emphasis>&lt;yax-installation-directory&gt;</emphasis>/examples directory: 
         </para>
         <itemizedlist>
            <listitem>
               <para>
                  1) <emphasis>&lt;input filename&gt;</emphasis>.output.xml
               </para>
               <para lang="en">
                  contains the result of processing the pipeline.
               </para>
            </listitem>
            <listitem>
               <para>
                  2) <emphasis>&lt;pipeline filename&gt;</emphasis>.config.xml
               </para>
               <para lang="en">
                  contains the pipeline with all implicit ports and resulting connections between the ports and all
                  used pipeline-library (the actual implementation is handled as serveral libraries):
               </para>
               <programlisting format="linespecific">
                  
&lt;yax:configuration xmlns:yax="http://www.opsdesign.eu/yax/1.0"&gt;
  &lt;!--configuration description generated by Yax - Do not edit by hand--&gt;
  &lt;pipeline name="pipe1"&gt;
    ..
    &lt;step name="trans1"&gt;
      &lt;output port="out" sequence="no" yax:creator="implementation.xproc.standard"/&gt;
      &lt;input port="in" sequence="no" yax:creator="implementation.xproc.standard"&gt;
        &lt;yax:connection port="in" yax:component="pipe1"/&gt;
      &lt;/input&gt;
      &lt;input port="stylesheet" sequence="no" yax:creator="implementation.xproc.standard"/&gt;
      &lt;input href="examples/transformation1.xsl" port="stylesheet" yax:creator="pipeline"/&gt;
    &lt;/step&gt;
    ...
  &lt;/pipeline&gt;
  &lt;xproc:pipeline-library name="xproc.options" xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"&gt;
    &lt;xproc:declare-step-type type="Rename" yax:description=""&gt;
      &lt;xproc:output port="out" select="" sequence="no" yax:bySourceRequired="no"/&gt;
      &lt;xproc:input port="in" select="" sequence="no" yax:bySourceRequired="no"/&gt;
      &lt;xproc:parameter name="name" required="yes" yax:values="{$any}"/&gt;
      &lt;xproc:parameter name="select" required="yes" yax:values="{$xpathExpression}"/&gt;
    &lt;/xproc:declare-step-type&gt;
    ...
  &lt;/xproc:pipeline-library&gt;
  &lt;xproc:pipeline-library name="xproc.standard" xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"&gt;
    ...
  &lt;/xproc:pipeline-library&gt;
  &lt;xproc:pipeline-library name="yax.standard" xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"&gt;
    ...
  &lt;/xproc:pipeline-library&gt;
&lt;/yax:configuration&gt;
                  
               </programlisting>
            </listitem>
            <listitem>
               <para>
                  3) <emphasis>&lt;pipeline filename&gt;</emphasis>.pipeTrace.png
               </para>
               <para lang="en">
                  contains the compressed graphical representation of the pipeline. 
                  (This file will only generated if the <emphasis>automaticOutput</emphasis> attribut 
                  of the <emphasis>&lt;pipetrace&gt;</emphasis> preference is set to 'yes'.)
               </para>
               <figure id="example1.pipeTrace.png" float="0">
                  <title>
                     <phrase id="example1.pipeTrace.png.en" lang="en">Compressed Graphical Representation of the Pipeline 'example1.xproc'</phrase>
                     
                  </title>
                  <mediaobject>
                     <imageobject role="html">
                        <imagedata fileref="figures/example1.pipeTrace.png" format="PNG"/>
                     </imageobject>
                     <imageobject role="fo">
                        <imagedata fileref="figures/example1.pipeTrace.png" scale="50" format="PNG"/>
                     </imageobject>
                  </mediaobject>
               </figure>
            </listitem>
            <listitem>
               <para>
                  4) <emphasis>&lt;pipeline filename&gt;</emphasis>.portTrace.png
               </para>
               <para lang="en">
                  contains the graphical representation of the pipeline which depicts the 
                  expected route the process will take over the ports.
                  (This file will only generated if the <emphasis>automaticOutput</emphasis> attribut 
                  of the <emphasis>&lt;porttrace&gt;</emphasis> preference is set to 'yes'.)
               </para>
               <figure id="example1.portTrace.png" float="0">
                  <title>
                     <phrase id="example1.portTrace.png.en" lang="en">Graphical Representation of the Pipeline 'example1.xproc'</phrase>
                     
                  </title>
                  <mediaobject>
                     <imageobject role="html">
                        <imagedata fileref="figures/example1.portTrace.png" format="PNG"/>
                     </imageobject>
                     <imageobject role="fo">
                        <imagedata fileref="figures/example1.portTrace.png" scale="40" format="PNG"/>
                     </imageobject>
                  </mediaobject>
               </figure>
            </listitem>
         </itemizedlist>
         
      </section>
   </section>
      
   <section id="approach">
      <title>
         <phrase lang="en">Approach</phrase>
         
      </title>
      <para lang="en"> The core idea of yax is to implement the XProc specification in a way that</para>
      <para lang="en">a) makes it easy to follow the 'evolution' of the specification, </para>
      <para lang="en">b) makes it easy to implement custom extentions and </para>
      <para lang="en">c) makes some suggestions to the specification possible.</para>
      
      <section id="io">
         <title>
            <phrase lang="en">Inputs / Outputs </phrase>
            
         </title>
         <para lang="en">
            I assume for the majority of pipeline use cases the position of steps (and constructs) 
            implies the chaining of input and output ports in the sequence of its appearance. 
            That in mind it would be the easiest way to omit the explicit port entries where the 
            intention of chaining the input and output ports is expressed by position of the components. 
            Going this way it is necessary to write port entries only for the situation in which one want 
            deviate the ordinary sequence.
         </para>
         <para lang="en">
            In case of a closed pipeline structure the pipeline processing is quiet obvious:  
         </para>
         <programlisting format="linespecific">
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="validate1" type="xproc:Validate"/&gt; 
   &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="validate2" type="xproc:Validate"/&gt; 
&lt;/xproc:pipeline&gt;
         </programlisting>
         <figure id="io.closed.pipeTrace.png" float="0">
            <title>
               <phrase id="io.closed.png.en" lang="en">Simple 'closed' pipeline</phrase>
               
            </title>
            <mediaobject>
               <imageobject role="html">
                  <imagedata fileref="figures/io.closed.pipeTrace.png" format="PNG"/>
               </imageobject>
               <imageobject role="fo">
                  <imagedata fileref="figures/io.closed.pipeTrace.png" scale="50" format="PNG"/>
               </imageobject>
            </mediaobject>
         </figure>
         <para lang="en">
            In case of using switching constructs like <emphasis>&lt;Choose&gt;</emphasis> <emphasis>&lt;Try/Catch&gt;</emphasis> 
            the pipeline keeps closed and the pipeline processing as in the previous case:  
         </para>

         <programlisting format="linespecific">

   &lt;xproc:pipeline name="pipe1" 
      xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
      xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
      &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
         &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
      &lt;/xproc:step&gt;
      &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
         &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
      &lt;/xproc:step&gt;
      &lt;xproc:choose name="choose1"&gt;
         &lt;xproc:when name="choose1when1"&gt;
            &lt;xproc:step name="trans3.1.1" type="xproc:XSLT"&gt;
               &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
            &lt;/xproc:step&gt;
            &lt;xproc:step name="trans3.1.2" type="xproc:XSLT"&gt;
               &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
            &lt;/xproc:step&gt;
         &lt;/xproc:when&gt;
         &lt;xproc:when name="choose1when2"&gt;
            &lt;xproc:step name="trans3.2.1" type="xproc:XSLT"&gt;
               &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
            &lt;/xproc:step&gt;
            &lt;xproc:step name="trans3.2.2" type="xproc:XSLT"&gt;
               &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
            &lt;/xproc:step&gt;
         &lt;/xproc:when&gt;
         &lt;xproc:otherwise name="choose1otherwise"&gt;
            &lt;xproc:step name="trans3.9.1" type="xproc:XSLT"&gt;
               &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
            &lt;/xproc:step&gt;
            &lt;xproc:step name="trans3.9.2" type="xproc:XSLT"&gt;
               &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
            &lt;/xproc:step&gt;
         &lt;/xproc:otherwise&gt;
      &lt;/xproc:choose&gt;
      &lt;xproc:step name="trans4" type="xproc:XSLT"&gt;
         &lt;xproc:input port="stylesheet" href="test/transformation4.xsl"/&gt; 
      &lt;/xproc:step&gt;
   &lt;/xproc:pipeline&gt;            
            
         </programlisting>
         <figure id="io.closedWithSwitch.pipeTrace.png" float="0">
            <title>
               <phrase id="io.closedWithSwitch.png.en" lang="en">'Closed' Pipeline with Switching Construct</phrase>
               
            </title>
            <mediaobject>
               <imageobject role="html">
                  <imagedata fileref="figures/io.closedWithSwitch.pipeTrace.png" format="PNG"/>
               </imageobject>
               <imageobject role="fo">
                  <imagedata fileref="figures/io.closedWithSwitch.pipeTrace.png" scale="50" format="PNG"/>
               </imageobject>
            </mediaobject>
         </figure>
         
         <para lang="en">
            Components like <emphasis>&lt;Store&gt;</emphasis> and <emphasis>&lt;Load&gt;</emphasis> opens 
            a pipeline.
         </para>
         <para lang="en">
            <emphasis>&lt;Store&gt;</emphasis> (and all other output components) opens the pipeline backward by
            transfering the current result to somewhere, but the main trunk of the pipeline will be kept untouched. 
         </para>
         
         <programlisting format="linespecific">
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="store1" type="xproc:Store"/&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation4.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans4" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation4.xsl"/&gt; 
   &lt;/xproc:step&gt;
&lt;/xproc:pipeline&gt;
            
         </programlisting>
         <figure id="io.openWithStore.pipeTrace.png" float="0">
            <title>
               <phrase id="io.openWithStore.png.en" lang="en">'Backward Open' Pipeline with Output Component</phrase>
               
            </title>
            <mediaobject>
               <imageobject role="html">
                  <imagedata fileref="figures/openWithStore.pipeTrace.png" format="PNG"/>
               </imageobject>
               <imageobject role="fo">
                  <imagedata fileref="figures/openWithStore.pipeTrace.png" scale="50" format="PNG"/>
               </imageobject>
            </mediaobject>
         </figure>
         
         
         <para lang="en">
            Only <emphasis>&lt;Load&gt;</emphasis> (and all other input components) cuts the main trunk and   
           and a decision how to continue is necessary. For instant yax simply cuts the trunk of the pipeline.
           The effect is - assuming c.p. - the result of the previous pipeline is simply discarded.
         </para>

         <programlisting format="linespecific">
            
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="load1" type="xproc:Load"/&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation4.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans4" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation4.xsl"/&gt; 
   &lt;/xproc:step&gt;
&lt;/xproc:pipeline&gt;
            
         </programlisting>
         <figure id="io.openWithLoad.pipeTrace.png" float="0">
            <title>
               <phrase id="io.openWithLoad.png.en" lang="en">'Foreward Open' Pipeline with Input Component</phrase>
               
            </title>
            <mediaobject>
               <imageobject role="html">
                  <imagedata fileref="figures/openWithLoad.pipeTrace.png" format="PNG"/>
               </imageobject>
               <imageobject role="fo">
                  <imagedata fileref="figures/openWithLoad.pipeTrace.png" scale="50" format="PNG"/>
               </imageobject>
            </mediaobject>
         </figure>
         
         <para lang="en">
            So using input components only makes sense if one uses expicit references to the output port
            of the preceding part of an input component.   
         </para>

         <programlisting format="linespecific">
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="load1" type="xproc:Load"/&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation4.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans4" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation4.xsl"/&gt; 
      <emphasis role="bold">&lt;xproc:input port="in" step="trans2" source="out"/&gt;</emphasis> 
   &lt;/xproc:step&gt;
&lt;/xproc:pipeline&gt;
            
         </programlisting>
         <figure id="io.openWithLoadAndExplicitConnection.pipeTrace.png" float="0">
            <title>
               <phrase id="io.openWithLoadAndExplicitConnection.png.en" lang="en">Foreward Open' Pipeline with Explicit Connection</phrase>
               
            </title>
            <mediaobject>
               <imageobject role="html">
                  <imagedata fileref="figures/openWithLoadAndExplicitConnection.pipeTrace.png" format="PNG"/>
               </imageobject>
               <imageobject role="fo">
                  <imagedata fileref="figures/openWithLoadAndExplicitConnection.pipeTrace.png" scale="50" format="PNG"/>
               </imageobject>
            </mediaobject>
         </figure>
      </section>
      <section id="extensions">
         <title>
            <phrase lang="en">Extension Mechanism</phrase>
            
         </title>
         <para>
            All component type classes have to reside in a package called 'net.sf.yax.types'.
            The built-in components are physically located in the yax library file <emphasis>yax-&lt;version&gt;.jar</emphasis>.
            They are distributed on three pipeline-libraries:
         </para>
         <itemizedlist>
               <listitem>
                  <para>
                     xproc-standard
                  </para>
               </listitem>
               <listitem>
                  <para>
                     xproc-options
                  </para>
               </listitem>
               <listitem>
                  <para>
                     yax-standard
                  </para>
               </listitem>
            </itemizedlist>
         <para>
            yax depicts all existant components grouped by libraries in the pipeline config file. 
         </para> 
         <para>
            you can extend yax with step implemented by yourown by simply extend the class
            net.sf.yax.types.StepType and place the class file(s) of this implementation into the 
            <emphasis>custom</emphasis> directory. For further details please refer to 'references/custom steps'.   
         </para> 
      </section>
      <section id="proccesAndError">
         <title>
            <phrase lang="en">Processing and Error Handling</phrase>
            
         </title>
         <para>
            ToDo
         </para>
      </section>
      <section id="issues">
         <title>
            <phrase lang="en">Issues concerning the Specification</phrase>
            
         </title>
         <itemizedlist>
            <title>
               <phrase lang="en">Issues concerning the Specification</phrase>
               
            </title>
            <listitem>
               <para>Associating Documents with Ports / Specified by source</para>
               <para>
                  Since constructs also have ports, their ports should also be reachable 
                  by referencing via 'by source'. So 
               </para>
               <para>
                  <programlisting format="linespecific">
&lt;p:step name="expand" type="p:xinclude"&gt;
  &lt;p:input port="document" <emphasis role="bold">step="otherstep"</emphasis> source="result"/&gt;
&lt;/p:step&gt;
                  </programlisting>
                  
               </para>
               <para>
                  should become something like (better with a more handsome term for 'component'):
               </para>
               <para>
                  <programlisting format="linespecific">
&lt;p:step name="expand" type="p:xinclude"&gt;
  &lt;p:input port="document" <emphasis role="bold">component="otherComponent"</emphasis> source="result"/&gt;
&lt;/p:step&gt;
                  </programlisting>
                  
               </para>
            </listitem>
            <listitem>
               <para>
                  Associating Documents with Output Ports
               </para>
               <para>
                  Are there use cases this kind of association makes sense?
               </para>
            </listitem>
            <listitem>
               <para>
                  context of choose/when/otherwise
               </para>
               <para>
                  the context should also be provided by a (e.g. reference) port. 
               </para>
            </listitem>
            <listitem>
               <para>
                  are there important reasons to differenciate between steps and constructs? 
               </para>
            </listitem>
            <listitem>
               <para>
                  Should a 'declare-construct-type' exists?
               </para>
               <para>
                  In my understanding the only difference between constructs and steps is that steps treats the result 
                  while constructs only passes the result without any treatment. 
                  Otherwise both have to follow the rule for components.
               </para>
               <para>
                  One can define custom 'step's. So should one also be able to define constructs.
               </para>
            </listitem>
            <listitem>
               <para>
                  what expression language(s) (el) should be used in XProc scripts?
               </para>
               <para>
                  For compatibility purposes an el should be defined by the specification. 
                  Otherwise the scripts runs only on processors which understands a certain el.
               </para>
            </listitem>
            <listitem>
               <para>
                  Try/Catch
               </para>
               <para>
                  Group within Try necessary?
               </para>
               <para>
                  multiple Catch clauses would make sense.
               </para>
            </listitem>
            <listitem>
               <para>
                  namespace uri for XProc
               </para>
            </listitem>
            <listitem>
               <para>
                  base URI for XInclude and Store
               </para>
               <para>
                  A pipeline might has more than one input document simultaniously 
                  via the root input and loads.
                  How to determine a single base URI?
               </para>
            </listitem>
            <listitem>
               <para>
                  Load / Store
               </para>
               <para>
                  As Load should provide an unambiguous content on its <emphasis>result</emphasis> port
                  it must not have other inputs than the source referenced by href. 
               </para>
               <para>
                  Store provides (or better delivers) an unambigous content to the external realm via the href.
                  If Store would provide this content simulantiously an its <emphasis>result</emphasis> the pipeline 
                  chain could be kept closed at a Store step point. 
               </para>
            </listitem>
         </itemizedlist>
      </section>
   </section>
   <section id="features">
      <title>
         <phrase lang="en">Features</phrase>
         
      </title>
      <table id="features.table" frame="all">
         <title>
            <phrase lang="en">Features</phrase>
            
         </title>
         <tgroup cols="2">
            <colspec colnum="1" colname="feature" colwidth="1*"/>
            <colspec colnum="2" colname="description" colwidth="1*"/>
            <thead>
               <row>
                  <entry colname="feature">
                     <para lang="en"><emphasis role="bold">Feature</emphasis> </para>
                     
                  </entry>
                  <entry colname="feature">
                     <para lang="en"> <emphasis role="bold">Description</emphasis> </para>
                     
                  </entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry namest="feature" nameend="description">
                     <para lang="en"> <emphasis role="bold">common features</emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para lang="en"> logging </para>
                     
                  </entry>
                  <entry colname="description">
                     <para lang="en">
                        You can use either log4j or another logging subsystem. 
                        Is no logging system is determined the log will be written to the system ports.</para>
                     
                  </entry>
               </row>
               <row>
                  <entry namest="feature" nameend="description">
                     <para lang="en"> <emphasis role="bold">Implementation of Constructs</emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para>&lt;p:pipeline&gt;</para>
                  </entry>
                  <entry colname="description">
                     <para lang="en">
                        The <emphasis>&lt;Pipeline&gt;</emphasis> element should be implemented in accordance with 
                        the specification.
                     </para>
                     <para lang="en">
                        The input port provides the documents to the contained components.
                        The output port receives the result and provides it to the external realm. 
                     </para>
                  </entry>
               </row>
                <row>
                  <entry colname="feature">
                     <para><emphasis>&lt;p:choose&gt;/&lt;p:when&gt;/&lt;p:choose&gt;</emphasis></para>
                  </entry>
                  <entry colname="description">
                     <para lang="en">
                        The <emphasis>&lt;p:choose&gt;/&lt;p:when&gt;/&lt;p:choose&gt;</emphasis> element should be implemented in accordance with 
                        the specification.
                     </para>
                     <para lang="en">
                        Beside the <emphasis>source</emphasis> and the <emphasis>result</emphasis> port <emphasis>&lt;p:choose&gt;/&lt;p:when&gt;/&lt;p:choose&gt;</emphasis>
                        uses the <emphasis>reference</emphasis> port. You can define a <emphasis>reference</emphasis> port
                        either for each <emphasis>&lt;p:when&gt;</emphasis>  or a general <emphasis>reference</emphasis> port at the <emphasis>&lt;p:choose&gt;</emphasis> element
                        (or a mix from both).
                        The input port provides the documents to the contained components.
                        <emphasis>&lt;p:choose&gt;/&lt;p:when&gt;/&lt;p:choose&gt;</emphasis> communicates only via the ports of the <emphasis>&lt;p:choose&gt;</emphasis> element with the external realm. 
                     </para>
                  </entry>
               </row>
                <row>
                  <entry colname="feature">
                     <para><emphasis>&lt;p:try&gt;/&lt;p:group&gt;/&lt;p:catch&gt;</emphasis></para>
                  </entry>
                  <entry colname="description">
                     <para lang="en">
                        The <emphasis>&lt;p:try&gt;/&lt;p:group&gt;/&lt;p:catch&gt;</emphasis> element should be implemented in accordance with 
                        the specification.
                     </para>
                     <para lang="en">
                        The <emphasis>&lt;p:try&gt;</emphasis> element traps all exception which appears while processing the <emphasis>&lt;p:group&gt;</emphasis> elements content.
                        If an exception appears the <emphasis>&lt;p:catch&gt;</emphasis> gets the control to continue the processing. 
                        <emphasis>&lt;p:try&gt;/&lt;p:group&gt;/&lt;p:catch&gt;</emphasis> communicates only via the ports of the <emphasis>&lt;p:try&gt;</emphasis> element with the external realm. 
                     </para>
                  </entry>
               </row>
               <row>
                  <entry namest="feature" nameend="description">
                     <para lang="en"> <emphasis role="bold">Implementation of Steps</emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para>&lt;p:XSLT&gt;</para>
                  </entry>
                  <entry colname="description">
                     <para lang="en">
                        The <emphasis>&lt;XSLT&gt;</emphasis> step should be implemented in accordance with 
                        the specification.
                     </para>
                     <para lang="en">
                        The step receives the document, which is to treat via the input port and provides the 
                        transformation result at the output port.
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para>&lt;p:XInclude&gt;</para>
                  </entry>
                  <entry colname="description">
                     <para lang="en">
                        The <emphasis>&lt;XInclude&gt;</emphasis> step should be implemented in accordance with 
                        the specification.
                     </para>
                     <para lang="en">
                        The step receives the document, which is to treat via the input port and provides the 
                        transformation result at the output port.
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para>&lt;p:Load&gt;</para>
                  </entry>
                  <entry colname="description">
                     <para lang="en">
                        The <emphasis>&lt;Load&gt;</emphasis> step should be implemented in accordance with 
                        the specification.
                     </para>
                     <para lang="en">
                        The step loads an XML document from somewhere accessed via the URI expressed in the href attribute 
                        and provides this document at the <emphasis>result</emphasis> port.
                        The URI might also reference to an database server or any other service, which is able to return XML documents.
                        (yax will provide a (experimental?) data source interface in one of the next releases.)  
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para>&lt;p:Store&gt;</para>
                  </entry>
                  <entry colname="description">
                     <para lang="en">
                        The <emphasis>&lt;Store&gt;</emphasis> step should be implemented in accordance with 
                        the specification.
                     </para>
                     <para lang="en">
                        The step store the content of a context to somewhere accessed via the URI expressed in the href attribute.
                        The URI might also reference to an database server or any other service, which is able to return XML documents.
                        (yax will provide a (experimental?) data source interface in one of the next releases.)  
                     </para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </section>
<section id="status">
      <title id="status.title">
         <phrase lang="en">Status</phrase>
         
      </title>
      <para lang="en">
         yax currently provides a command line interface (see Quickstart and Reference). Other interfaces will follow in short.
      </para>
      <para lang="en">
         All language components will be implemented step by step. Currently the most important components
         <itemizedlist>
          <listitem>
            <para>
              <emphasis>&lt;p:pipeline&gt;</emphasis> 
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>&lt;p:XSLT&gt;</emphasis> 
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>&lt;p:XInclude&gt;</emphasis> 
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>&lt;p:Load&gt;</emphasis> 
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>&lt;p:Store&gt;</emphasis> 
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>&lt;p:choose&gt;/&lt;p:when&gt;/&lt;p:otherwise&gt;</emphasis> 
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis>&lt;p:try&gt;/&lt;p:group&gt;/&lt;p:catch&gt;</emphasis> 
            </para>
          </listitem>
         </itemizedlist> 
         are usable. The other components still exist but have got an interims implementation, which passes a document through 
         the pipeline process without treating it in the specification conformant way. 
         Such an interims implementation is indicated by a warning message.
         You can omit the output of these messages by setting the preference standardImplementationWarnings to "no".
      </para>
      <para lang="en">
         The interims implementation of language constructs resp. containers (controlling parts like <emphasis>choose</emphasis>, <emphasis>try/catch</emphasis>, etc.)
         acts like the <emphasis>pipeline</emphasis> construct. It passes the treated document to the contained components, receives the result and provides it 
         for further treatment. 
      </para>
      <para lang="en">
         The interims implementation of steps (active pipeline parst, which treat the documents like <emphasis>XInclude</emphasis>, <emphasis>XSLT</emphasis>, etc.),
         acts like the <emphasis>Identity</emphasis> step. It receives the treated document and provides it for further treatment without doing something by its own.
      </para>
      <para lang="en">
         The first releases of yax will be published continuously in short intervals with the hope of vital feedback.
      </para>
      <table id="features.status.table" frame="all">
         <title>
            <phrase lang="en">Status of Implementation</phrase>
            
         </title>
         <tgroup cols="2">
            <colspec colnum="1" colname="feature" colwidth="1*"/>
            <colspec colnum="2" colname="status" colwidth="1*"/>
            <colspec colnum="3" colname="annotation" colwidth="1*"/>
            <thead>
               <row>
                  <entry colname="feature">
                     <para lang="en"><emphasis role="bold">Feature</emphasis> </para>
                     
                  </entry>
                  <entry>
                     <para lang="en"> <emphasis role="bold">Status</emphasis> </para>
                     
                  </entry>
                  <entry>
                     <para lang="en"> <emphasis role="bold">Annotation</emphasis> </para>
                     
                  </entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry namest="feature" nameend="annotation">
                     <para lang="en"> <emphasis role="bold">Common Issues</emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> inputs and outputs </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> in process </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                        implicit ports realized.
                     </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> property / property files </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> preferences / preference file </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                     
                  </entry>
               </row>
               <row>
                  <entry namest="feature" nameend="annotation">
                     <para lang="en"> <emphasis role="bold">Core Language Constructs </emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Pipeline </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Group </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                        same behaviour as Pipeline.
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> For-Each </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> planned </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Viewport </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> planned </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Choose/When/Otherwise </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                        first usage of explicit reference ports:
                        if exists reference ports of when clauses can refer to 
                        the reference port of the choose construct (or obviously th another reference port)  
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Try/Group/Catch </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                        extended with differentiating catch clauses.
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Import </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> planned </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Pipeline-Library</para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                        yax builds libraries based on the current implementation (see pipeline config file).
                     </para>
                     <para lang="en">
                        CRs expected.
                     </para>
                  </entry>
               </row>
               <row>
                  <entry namest="feature" nameend="annotation">
                     <para lang="en"> <emphasis role="bold">Core Steps </emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Identity </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> XSLT </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                        CRs expected.              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> XInclude </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Serialize </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> in process </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Parse </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> in process </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Load </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                      will be extended with access to database server and other data services.              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Store </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">              
                      will be extended with access to database server and other data services.              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry namest="feature" nameend="annotation">
                     <para lang="en"> <emphasis role="bold"> Components Subelements </emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> input </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> (done)/in process </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                        refer to <emphasis>inputs / outputs </emphasis> in this table.              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> output </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> (done)/in process </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                        refer to <emphasis>inputs / outputs </emphasis> in this table.              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Parameter </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> done </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> input-parameter </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> ?? </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                        didn't understood.              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry namest="feature" nameend="annotation">
                     <para lang="en"> <emphasis role="bold">Mirco Operations Components (normal steps?) </emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Rename </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> planned </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Wrap </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> planned </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Insert </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> in process </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">              
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="feature">
                     <para> Set-Attributes </para>
                  </entry>
                  <entry colname="status">
                     <para lang="en"> planned </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">              
                     </para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>
      <para lang="en">
      </para>
   </section>   
   <section id="reference">
      <title id="reference.title">
         <phrase lang="en">Reference</phrase>
         
      </title>
      <section id="overview">
         <title>
            <phrase lang="en">Overview</phrase>
            
         </title>
         <para lang="en"> Description ToDo</para>
         
      </section>
      <section id="prerequisites">
         <title>
            <phrase lang="en">Prerequisites</phrase>
            
         </title>
         <para lang="en"> The following packages have to be available (installed) on an arbitrary
            location: </para>
         
         <table id="prerequisites.table" frame="all">
            <title>
               <phrase lang="en">Required Packages</phrase>
               
            </title>
            <tgroup cols="2">
               <colspec colnum="1" colname="package" colwidth="1*"/>
               <colspec colnum="2" colname="description" colwidth="1*"/>
               <thead>
                  <row>
                     <entry colname="package">
                        <para lang="en">Package</para>
                        
                     </entry>
                     <entry>
                        <para lang="en">Usage</para>
                        
                     </entry>
                  </row>
               </thead>
               <tbody>
                  <row>
                     <entry colname="package">
                        <para> Java (Version 5 or above) </para>
                     </entry>
                     <entry colname="description">
                        <para lang="en"> 
                           Since Version 1.4 Java contains a default transformation processor (XSLTC).
                           This processor will be used if no other processors are visible (in the classpath).
                           yax assumes the presence of this processor. So at least Java 1.4 is necessary for using yax.
                           As yas is developed under Java 5 it is the recommended Java version.
                        </para>
                     </entry>
                  </row>
                  <row>
                     <entry colname="package">
                        <para> Ant(Version 1.7.0 or above) </para>
                     </entry>
                     <entry colname="description">
                        <para lang="en"> 
                           yax comes with an ant task, so you can use yax also under ant.
                           An ant installation is only needed if you want to use the yax ant task.   
                        </para>
                     </entry>
                  </row>
                  <row>
                     <entry colname="package">
                        <para> Log4j(Version 1.2.14 or above) </para>
                     </entry>
                     <entry colname="description">
                        <para lang="en"> 
                           log4j is the recommended logging system.
                           If log4j is not installed (resp. not reachable) yax uses its own ConsoleLogger.
                           If you yax only under ant from yax perspective a log4j installation is not necessary
                           because all log messages will be redirected to the ant logger.   
                        </para>
                     </entry>
                  </row>
                  <row>
                     <entry colname="package">
                        <para> <ulink url="http://www.saxonica.com/">Saxon</ulink>(xls1: Version 6.5.3 or above, xls2: Version 8.6. or above) </para>
                     </entry>
                     <entry colname="description">
                        <para lang="en"> 
                           yax provides the usage of different XSL processors. 
                           The saxon processors builds the preferred test environment for the yax development.
                           (Obviously you can use any xsl processor which is reachable vie JAXP). 
                           The preferences file still includes the Saxon processors.
                           If you want to use it follow Saxonias instruction how to obtain and install them.
                           If no xsl processor is installed yax uses the system default transformer which comes with JRE (XSLTC).        
                        </para>
                     </entry>
                  </row>
                  <row>
                     <entry colname="package">
                        <para> <ulink url="http://xml.apache.org/xalan-j/">Xalan /(XSLTC)</ulink>(Version 2.7.0 or above) </para>
                     </entry>
                     <entry colname="description">
                        <para lang="en"> 
                           yax provides the usage of different XSL processors. 
                           Xalan comes from Apache. 
                           The preferences file still includes the Xalan and the XSLTC processor.
                           If you want to use them follow Apaches instruction how to obtain and install them.
                           If no xsl processor is installed yax uses the system default transformer which comes with JRE (XSLTC).        
                        </para>
                     </entry>
                  </row>
                  <row>
                     <entry colname="package">
                        <para>
                           <ulink url="http://www.graphviz.org/">Graphviz - Graph Visualization Software</ulink> 
                        </para>
                     </entry>
                     <entry colname="description">
                        <para lang="en">
                           yax provides the graphical visualisation of a pipeline in two ways.
                           The <emphasis>port trace </emphasis>depicts the flow of the input(s) by drawing 
                           the expected usage of the components ports.
                           The <emphasis>pipeline trace</emphasis> is a more compressed mode of the same matter.
                        </para>
                        <para lang="en">
                           For these features yax generates dot scripts and executes
                           dot.exe of Graphviz to generate the pictures of the graphs. 
                        </para>
                        <para lang="en">
                           If you would like to use these features dot.exe must be installed and reachable (via system path). 
                        </para>
                     </entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </section>
      <section id="installation">
         <title>Installation</title>
         <para lang="en"> Download yax from <ulink url="http://yax.sourceforge.net">http://yax.sourceforge.net</ulink>
            and unzip the file to an arbitrary <emphasis>&lt;yax-installation-directory&gt;</emphasis>.
         </para>
         
         
         <programlisting format="linespecific">

<emphasis>&lt;yax-installation-directory&gt;/lib</emphasis>
|
+--- lib
     |
     +--- yax-&lt;n.m&gt;.jar (&lt;n.m&gt; = Version Number)
         </programlisting>
         
      </section>
      <section id="configuration">
         <title>
            <phrase lang="en">Configuration</phrase>
            
         </title>
        <section id="configuration.overview">
           <title>
              <phrase lang="en">Overview</phrase>
              
           </title>
           <para lang="en"> 
              You can have influence on the behaviour of yax over several ways:
              <itemizedlist>
                <listitem>
                  <para>
                    alter preferences within the preferences file at <emphasis>&lt;yax-installation-directory&gt;</emphasis>/config/preferences.xml
                  </para>
                </listitem>
                <listitem>
                  <para>
                    pass particular properties at command line  
                  </para>
                </listitem>
                 <listitem>
                  <para>
                    pass a name of a property file at command line  
                  </para>
                </listitem>
                 <listitem>
                  <para>
                    use the standard property file 'yax.properties' at the current directory  
                  </para>
                </listitem>
              </itemizedlist> 
           </para>
        </section>
        <section id="properties">
          <title>
            <phrase lang="en">Properties</phrase>
            
          </title>
          <table id="properties.table" frame="all">
             <title>
                <phrase lang="en">Property</phrase>
                
             </title>
             <tgroup cols="2">
                <colspec colnum="1" colname="property" colwidth="1*"/>
                <colspec colnum="2" colname="description" colwidth="1*"/>
                <thead>
                   <row>
                      <entry colname="property">
                         <para lang="en"><emphasis role="bold">Property</emphasis> </para>
                         
                      </entry>
                      <entry colname="description">
                         <para lang="en"> <emphasis role="bold">Description</emphasis> </para>
                         
                      </entry>
                   </row>
                </thead>
                <tbody>
                   <row>
                      <entry namest="property" nameend="description">
                         <para lang="en"> <emphasis role="bold">common properties</emphasis> </para>
                         
                      </entry>
                   </row>
                   <row>
                      <entry colname="property">
                         <para lang="en"> baseURI </para>
                         
                      </entry>
                      <entry colname="description">
                         <para lang="en">
                            The baseURI represents the base directory which is used by a relative path to become an absolute path. 
                         </para>
                      </entry>
                   </row>
                </tbody>
             </tgroup>
          </table>
        </section>
        <section id="propertyFiles">
          <title>
          <phrase lang="en">Property Files</phrase>
          
          </title>
          <para>
          </para>
        </section>
        <section id="preferences">
          <title>
          <phrase lang="en">Preferences</phrase>
          
          </title>
          <para>
          </para>
        </section>
        <section id="Logging">
          <title>
          <phrase lang="en">Logging</phrase>
          
          </title>
          <para lang="en">
            yax preferred logging system is <ulink url="http://logging.apache.org/log4j/docs/">log4j</ulink>. 
            yax comes with a log4j configuration containing a console appender and a rolling file appender 
            which writes a log file each day.  
          </para>
          <para lang="en">
            To simplify the beginning the recent Log4j library comes with yax. You can find the library
            in YAX_HOME/lib.
          </para>
          <para lang="en">
            In the root of YAX_HOME you can find the two bat-files 'runExample1.console.bat' and 
            'runExample1.log4j.bat. The two batches demonstrates who to use and how to avoid using
            log4j. Wether yax uses log4j or not depends simply on the fact whether yax finds log4j on the classpath or not.   
          </para>
          <para lang="en">
            While yax runs in ant mode yax redirects all log messages to ant's logger and 
            all other log configuraiton take no effect.
          </para>
        </section>
        
        <section id="classpath">
          <title>
          <phrase lang="en">classpath</phrase>
          
          </title>
          <para>
            For using yax in commandline mode 'yax-n.m.jar' (n.m = version number) must be reachable.
            if you want to run yax under ant the libraries 'yax-n.m.jar' and 'ant-yax.jar' must be reachable. 
            Both of the libraries resides by default in YAX_HOME/lib but can be placed at any other location. 
          </para>
          <para>
            If you want to use any other xslt processor than the system default transformer you have to
            place their libraries into the classpath. In commandline mode you can either place the libraries
            into the system classpath or pass it via classpath option (-classpath resp. -cp) during the 
            program start. When running yax under ant all necessary libraries must be assigned to the classpath
            BEFORE starting ant. Passing the transformer libraries via ant's classpath features (either within taskdef or with classpathref attribute)
            do not work.  
          </para>
        </section>
        
        <section id="catalog">
          <title>
          <phrase lang="en">XML Catalog</phrase>
          
          </title>
          <para>
            An XML catalog maps (usually remote) URIs to other (usually local) URIs.
          </para>
          <para>
            yax uses <ulink url="http://xml.apache.org/commons/components/resolver/">Norman Walsh's resolver</ulink>.
            You can configure the resolver - especially the link to your catalog file - by editing the config/CatalogManager.properties file.
            How to configure the the resolver is explained in an excellent manner on the <ulink url="http://xml.apache.org/commons/components/resolver/">resolver's site</ulink>
          </para>
          <para>
            For your confinience the yax distribution contains the recent resolver library (lib/resolver.jar). 
            If you want to use the xml catalog feature the config directory and the resolver.jar have to be part of your the classpath. 
            Start yax with the '-noCatalog' option If you want to suppress the xml catalog usage.
          </para>
          <para>
             
          </para>
        </section>
        
        <section id="baseURI">
          <title>
          <phrase lang="en">baseURI</phrase>
          
          </title>
          <para>
          </para>
        </section>
        
        <section id="expressionLanguage">
        
          <title>
            <phrase lang="en">Expression Language</phrase>
            
          </title>
          
          <para lang="en">
            At the present time the property reference mechanism 
            known from <ulink url="http://ant.apache.org/manual/index.html"/> is implemented.
          </para>
          <para lang="en">
            You can use parameter references with the form <emphasis>${&lt;parameter name&gt;}</emphasis>
            within <emphasis>href</emphasis> attribute (or parameter).
            This reference will be replaced by the value of parameter with the same name passed either by
            property file or by start parameter ('-D&lt;parameter name&gt;').
          </para>

            <para lang="en">
              With a combination of start parameter and parameter references within the xproc script you can
              build your scripts in a more flexible way. Example:
            </para>

            <programlisting format="linespecific">
# java -classpath lib/yax-0.7.jar 
       net.sf.yax.Yax 
       -Dexample.dir=examples 
       -Dtest.dir=test 
       -DoutputFilename=output1.xml 
       example1.xproc
            </programlisting>

            <programlisting format="linespecific">
&lt;xproc:pipeline name="pipe1" 
    xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
    xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
    &lt;xproc:step name="Load1" type="xproc:Load" href="${examples.dir}/${inputFilename}"/&gt;
    &lt;xproc:step name="Store1" type="xproc:Store" href="${test.dir}/${outputFilename}"/&gt;
&lt;/xproc:pipeline&gt;
            </programlisting>
        </section>
        
        <section id="startParameter">
          <title>
          <phrase lang="en">Program Startparameter</phrase>
          
          </title>
          <para>
              <table id="startParameter.table" frame="all">
                 <title>
                    <phrase lang="en">Features</phrase>
                    
                 </title>
                 <tgroup cols="3">
                    <colspec colnum="1" colname="attribute" colwidth="1*"/>
                    <colspec colnum="2" colname="description" colwidth="1*"/>
                    <colspec colnum="3" colname="required" colwidth="1*"/>
                    <thead>
                       <row>
                          <entry colname="attribute">
                             <para lang="en"><emphasis role="bold">Attribute</emphasis> </para>
                             
                            </entry>    
                      <entry colname="description">    
                         <para lang="en"> <emphasis role="bold">Description</emphasis> </para>    
                             
                      </entry>    
                    <entry colname="required">
                         <para lang="en"> <emphasis role="bold">Required</emphasis> </para>
                         
                      </entry>
                   </row>
                </thead>
                <tbody>
                   <row>
                      <entry colname="attribute">
                         <para>
                          script
                         </para>
                      </entry>
                      <entry colname="description">
                         <para lang="en">
                          name of the XProc script to use - given either relative to the baseURI or as an absolute path.
                         </para>
                         
                      </entry>
                      <entry colname="required">
                         <para lang="en">
                          Yes
                         </para>
                         
                      </entry>
                   </row>
                   <row>
                      <entry colname="attribute">
                         <para>
                          in
                         </para>
                      </entry>
                      <entry colname="description">
                         <para lang="en">
                          specifies a single XML document to be treated. Should be used with the out attribute.
                         </para>
                         
                         <para lang="en">
                          for multiple input use a fileset.
                         </para>
                         
                      </entry>
                      <entry colname="required">
                         <para lang="en">
                          No
                         </para>
                         
                      </entry>
                   </row>
                   <row>
                      <entry colname="attribute">
                         <para>
                          out
                         </para>
                      </entry>
                      <entry colname="description">
                         <para lang="en">
                          specifies the output name for the treated result from the in attribute.
                         </para>
                         
                      </entry>
                      <entry colname="required">
                         <para lang="en">
                          No. Must not be present, when 'in' is not present.
                         </para>
                         
                      </entry>
                   </row>
                   <row>
                      <entry colname="attribute">
                         <para>
                          force
                         </para>
                      </entry>
                      <entry colname="description">
                         <para lang="en">
                            recreates output files, even if they are newer than their corresponding input files or the XProc script.    
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            outDir
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            use in case of multiple input (via fileset).
                           </para>
                           <para lang="en">
                            specifies the directory where the output files are to write to.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            outPattern
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            use in case of multiple input (via fileset).
                           </para>
                           <para lang="en">
                            specifies how to build the output filename.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            noOutputfile
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            suppresses generation of an outputfile (overrides all other output parameters).
                           </para>
                           <para lang="en">
                            The usage of this parameter makes sense when you only want to use inner output.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            noCatalog
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            suppresses the usage of an xml catalog.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            propertyfile
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            the properties this file contains will be passed to yax for further usage.  
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            baseURI
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            the base directory for all containing steps and containers.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            verbose
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            yax logs verbosely.
                           </para>
                           <para lang="en">
                            For getting these log messages it is required that ant is also started in verbose mode. 
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            quiet
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            yax only logs errors, warnings and very important informations.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                  </tbody>
                </tgroup>
              </table>
          </para>
        </section>
      </section>
      <section id="usage">
         <title>
            <phrase lang="en">Usage</phrase>
            
         </title>
         <para/>
         <section id="usage.InputOutput">
            <title>
               <phrase lang="en">The Ways to Use Input and Generate Output</phrase>
               
            </title>
           <section id="usage.InputOutput.Overview">
              <title>
                 <phrase lang="en">Overview</phrase>
                 
              </title>
              <formalpara>
                <title>
                   <phrase lang="en">Input</phrase>
                   
                </title>
                <para>
                 There a (currently) two ways to access input data:
                 <itemizedlist>
                    <listitem>
                      <para>
                        use start parameters to pass input location(s) 
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        use the <emphasis>&lt;p:Load&gt;</emphasis> step.
                      </para>
                    </listitem>
                 </itemizedlist>
                </para>
              </formalpara>
              <formalpara>
                <title>
                   <phrase lang="en">Output</phrase>
                   
                </title>
                <para lang="en">
                   You can determine the output location(s) using the following solutions:
                   <itemizedlist>
                      <listitem>
                        <para>
                          <emphasis role="bold">Omit any determination concerning output.</emphasis>
                        </para>
                        <para>
                          Then yax generates the output location(s) based on the input location.
                          yax inserts <emphasis>.output</emphasis> into the input file name. Example:
                        </para>
                        <para>input location</para>
                        <programlisting format="linespecific">
path/to/input/resource/inputname.xml                   
                        </programlisting>
                        <para>output location</para>
                        <programlisting format="linespecific">
path/to/input/resource/inputname<emphasis role="bold">.output</emphasis>.xml                   
                        </programlisting>
                      </listitem>
                      <listitem>
                        <para>
                          <emphasis role="bold">Use the start parameters -out, -outDir- outPattern</emphasis>
                        </para>
                        <para>
                          yax generates the output location(s) based on these parameters.
                          For further details see the sections 'Start Parameters', 'Commandline', 'Ant Interface'.
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          <emphasis role="bold">use the <emphasis>&lt;p:Store&gt;</emphasis> step.</emphasis>
                        </para>
                        <para>
                          This step stores the current state of the treated content.
                          For further details see the section 'Using the Step <emphasis>&lt;p:Load&gt;</emphasis>'.
                        </para>
                        <para>
                          By using the start parameter <emphasis>-noOutputfile</emphasis> you can restrict the output
                          to the 'inner output'. 
                        </para>
                      </listitem>
                   </itemizedlist>
                </para>
              </formalpara>
           </section>
           <section id="usage.InputOutput.Outer">
              <title>
                 <phrase lang="en">Outer I/O</phrase>
                 
              </title>
              <para>
                All I/O effects by start parameters (or other interface input) is 
                called outer I/O.
              </para>
              <formalpara>
                <title>
                   <phrase lang="en">Passing only input file location start parameter</phrase>
                   
                </title>
                <para>
                  The most simple variant of an outer I/O is to use an input location parameter beside the mandatory xproc script location parameter:
                </para>
              </formalpara>
              <programlisting format="linespecific">
java -classpath lib/yax-0.8.jar net.sf.yax.Yax examples/example1.xproc <emphasis role="bold">examples/example1.xml</emphasis>
              </programlisting>
              <para>
                yax completes the necessary information based on the input location. 
                Assuming you pass the input file  
              </para>
              <programlisting format="linespecific">
path/to/input/resource/inputname.xml                   
              </programlisting>
	            <para>
                derived from that input location yax generates the output location:  
              </para>
	            <programlisting format="linespecific">
path/to/input/resource/inputname<emphasis role="bold">.output</emphasis>.xml                   
              </programlisting>
              <formalpara>
                <title>
                   <phrase lang="en">Passing input and output file location start parameter</phrase>
                   
                </title>
                <para>
                  The straight forward way of outer I/O is to pass an input location parameter and a corresponding output location parameter:
                </para>
              </formalpara>
              <programlisting format="linespecific">
java -classpath lib/yax-0.8.jar net.sf.yax.Yax examples/example1.xproc 
<emphasis role="bold">input/inputname.xml</emphasis>
<emphasis role="bold">output/outputname.xml</emphasis>
              </programlisting>
              <para>
                In that case the processing is obvious.
                yax takes the input document, passes it through the pipeline and writes
                the result to the ouput document.  
              </para>
              <formalpara>
                <title>
                   <phrase lang="en">Applying the XProc script on multiple input documents.</phrase>
                   
                </title>
                <para>
                  yax can also process multiple input documents in one run. For applying this 
                  feature it is recommended to use ant because in ant you can use the full flexibility of the fileset feature. Example:
                </para>
              </formalpara>
              <programlisting format="linespecific">
...
  &lt;target 
    name="pipeline1"
    description="uses different multiple input files"
    &gt;
    &lt;yax 
      verbose="yes"
      script="test/pipeline00.xproc"
      outDir="test"
      outPattern="${inputName}.out.${inputExtension}"
      &gt;
      <emphasis role="bold">
      &lt;fileset 
        dir="examples" 
        includes="
        example*.xml
        " 
        excludes="
        example2.xml
        " 
      /&gt;
      </emphasis>
    &lt;/yax&gt;
  &lt;/target&gt;
...              
              </programlisting>
              <para>
                Alltough you can you this feature in commmandline mode. You pass a colon separated input file list 
                with the <emphasis>-inList</emphasis> parameter:
              </para>
              <programlisting format="linespecific">
java -classpath lib/yax-0.8.jar net.sf.yax.Yax examples/example1.xproc 
<emphasis role="bold">-inList={input/inputname1.xml;input/inputname1.xml}</emphasis>
outDir=test outPattern="${inputName}.out.${inputExtension}
              </programlisting>
              <para>
                In case of processing multiple input documents it is not possible (or better makes no sense)
                to pass an output location for each input document. Therefore yax provides to other
                parameter for determining the output location(s).
              </para>
              <para>
                With <emphasis>-outDir</emphasis> you can choose an arbitrary output directory&gt;. 
                If you this parameter as the only output parameter the processed documents will be
                written to the output directory with its input filename. 
              </para>
              <para>
                The other parameter is the <emphasis>-outPattern</emphasis> parameter.
                With <emphasis>-outPattern</emphasis> you describes the pattern for building 
                the output file name. Example:
              </para>
              <para>
                Assuming you are using the pattern:
              </para>
              <programlisting format="linespecific">
<emphasis role="bold">outPattern="${inputName}.out.${inputExtension}</emphasis>              
              </programlisting>
              <para>
                and you are processing the input files example1.xml and example3.xml by using ant's fileset
              </para>
              <programlisting format="linespecific">
...
&lt;fileset 
  dir="examples" 
  includes="
  example*.xml
  " 
  excludes="
  example2.xml
  " 
/&gt;
...              
              </programlisting>
              <para>
                yax will created the two file:
              </para>
              <programlisting format="linespecific">
...
 examples
 |
 +-- example1.out.xml
     example2.out.xml
       
              </programlisting>
              <para>
                If you combine this parameter with the <emphasis>-outDir</emphasis> parameter
                determining the 'test' directory as output directory:
              </para>
              <programlisting format="linespecific">
...
<emphasis role="bold">
outDir="test"
outPattern="${inputName}.out.${inputExtension}"
</emphasis>
...              
              </programlisting>
              <para>
                yax writes the two files to the 'test' directory:
              </para>
              <programlisting format="linespecific">
...
<emphasis role="bold">
 test
</emphasis>
 |
 +-- example1.out.xml
     example2.out.xml
              </programlisting>
           </section>
           <section id="usage.InputOutput.Inner">
              <title>
                 <phrase lang="en">Inner I/O</phrase>
                 
              </title>
              <para>
                Beside the outer I/O which is effected by the usage of start parameters 
                you can use the steps <emphasis>p:Load</emphasis> and <emphasis>p:Store</emphasis> to read resp. write 
                xml documents during the pipeline process.
              </para>
              <para>
                Although they are alternative instruments outer I/O and inner I/O they work
                simultaniously. If you process for example a pipeline which includes 
                inner I/O without any output start parameter:   
              </para>
              <programlisting format="linespecific">
...              
&lt;target 
  name="runExample5.1"
  description="uses inner and outer I/O"
  &gt;
  &lt;yax 
    script="examples/example5.xproc"
    &gt;
    ...  
  &lt;/yax&gt;
&lt;/target&gt;
...
              </programlisting>
              <para>
                You will get two times the same output in different files:  
              </para>
              <programlisting format="linespecific">
...
INFO [Load:Load1] Reading input file '...\examples\xincludeArticle.xml' into Context '2'.
...
<emphasis role="bold">INFO [Store:Store1] Writing output file '...\test\example5.output.cmd.xml' from Context '2'.</emphasis>
...
<emphasis role="bold">INFO [root:yax.root] Writing output file '...\yaxOutput.xml' from Context '2'.</emphasis>
...
              </programlisting>
              <para>
                This is triggered by a)<emphasis>p:Store</emphasis> step
                and b) the automatic ouput determination of the <emphasis>root</emphasis> element.
                The following graphic shows this circumstance:  
              </para>
              <figure id="io.innerAndOuterIO.png" float="0">
                 <title>
                    <phrase id="io.innerAndOuterIO.png.en" lang="en">Outer and Inner I/O</phrase>
                    
                 </title>
                 <mediaobject>
                    <imageobject role="html">
                       <imagedata fileref="figures/io.innerAndOuterIO.png" format="PNG"/>
                    </imageobject>
                    <imageobject role="fo">
                       <imagedata fileref="figures/io.innerAndOuterIO.png" scale="50" format="PNG"/>
                    </imageobject>
                 </mediaobject>
              </figure>
              <para>
                The <emphasis>p:Store</emphasis> step creates a side branch but yax ports the
                content through the hole pipeline to the <emphasis>root</emphasis> container
                which is manages the outer I/O.
              </para>
              <para>
                To avoid such undesired output behaviour (assuming in this case the outer output is undesired)
                you can use the <emphasis>-noOutputfile</emphasis> parameter:
              </para>
              <programlisting format="linespecific">
...              
&lt;target 
  name="runExample5.2"
  description="uses only inner I/O"
  &gt;
  &lt;yax 
    <emphasis role="bold">noOutputfile="yes"</emphasis> 
    script="examples/example5.xproc"
    &gt;
    ...  
  &lt;/yax&gt;
&lt;/target&gt;
...
              </programlisting>
              <para>
                In this case the content on the output port of <emphasis>root</emphasis> will be discarded.  
              </para>
           </section>
         </section>
         
         <section id="usage.commandline">
            <title>
               <phrase lang="en">Command Line Interface</phrase>
               
            </title>
            <para lang="en">
               On the command line change to the <emphasis>&lt;yax-installation-directory&gt;</emphasis>
               and start yax with:
            </para>
            <programlisting format="linespecific">
# java -classpath lib/yax-0.7.jar net.sf.yax.Yax [options]<emphasis>pipeline file location</emphasis> [<emphasis>XML input data file location</emphasis>  [<emphasis>XML output data file location</emphasis>]]
            </programlisting>
            <para lang="en">
               If all works well you will get a set of messages like the following. Which transformation
               processor appears in the messages depends on your actual environment configuration.
            </para>
            <programlisting format="linespecific">

element 'yax:transformers' has ...<emphasis>something about transformer preference</emphasis>
... 
step '<emphasis>step name</emphasis>': <emphasis>something about transformer which will be used</emphasis>
...
<emphasis>messages from each step</emphasis>
... 
Yax run sucessful completed.

            </programlisting>

            <para lang="en">
               If you start yax with the option <emphasis>-h</emphasis> or without any start parameter
               you will get a message about the usage alternatives like:
            </para>


            <programlisting format="linespecific">

Usage: java yax [options] pipelineURI [inputfileURI [outputfileURI]]

Options: 

-h, -help              print this message (and exit)
-version               print version information (and exit)
-quiet, -q             be extra quiet
-verbose, -v           be extra verbose (quiet takes precedence)
-debug, -d             print debugging information
-baseURI=&lt;value&gt;       set the baseURI to value
-noOutputfile          suppress generation of an outputfile (overrides all other output parameters)
                       (make sense if output is created within the pipeline)
-D&lt;property&gt;=&lt;value&gt;   provide property for using within the xproc script as '${property}'
-propertyfile &lt;name&gt;   load properties from file (-D&lt;property&gt;s take precedence)

(for further usage alternatives see http://yax.sourceforge.net/)

            </programlisting>
            <warning>
              <para>
                debug effects that some steps (especially XSLT) logs the hole content of a context.
                So use thit option with care. At best use only small inputs when you use the debug option.
              </para>
            </warning>
            <para lang="en">
               This run generates several output file within the <emphasis>pipeline file directory</emphasis> and  
               within the <emphasis>XML input data file directory</emphasis>: 
            </para>
            <itemizedlist>
               <listitem>
                  <para>
                     1) <emphasis>&lt;input filename&gt;</emphasis>.output.xml
                  </para>
                  <para lang="en">
                     contains the result of processing the pipeline.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     2) <emphasis>&lt;pipeline filename&gt;</emphasis>.config.xml
                  </para>
                  <para lang="en">
                     contains the pipeline with all implicit ports and resulting connections between the ports and all
                     used pipeline-library (the actual implementation is handled as serveral libraries).
                  </para>
               </listitem>
               <listitem>
                  <para>
                     3) <emphasis>&lt;pipeline filename&gt;</emphasis>.pipeTrace.png
                  </para>
                  <para lang="en">
                     contains the compressed graphical representation of the pipeline. 
                     (This file will only generated if the <emphasis>automaticOutput</emphasis> attribut 
                     of the <emphasis>&lt;pipetrace&gt;</emphasis> preference is set to 'yes'.)
                  </para>
               </listitem>
               <listitem>
                  <para>
                     4) <emphasis>&lt;pipeline filename&gt;</emphasis>.portTrace.png
                  </para>
                  <para lang="en">
                     contains the graphical representation of the pipeline which depicts the 
                     expected route the process will take over the ports.
                     (This file will only generated if the <emphasis>automaticOutput</emphasis> attribut 
                     of the <emphasis>&lt;porttrace&gt;</emphasis> preference is set to 'yes'.)
                  </para>
               </listitem>
            </itemizedlist>
         </section>
         
         <section id="usage.ant">
            <title>
               <phrase lang="en">Yax Ant Task</phrase>
               
            </title>
            
           <section id="usage.ant.overview">
              <title>
                 <phrase lang="en">Overview</phrase>
                 
              </title>
              <para lang="en">
                the usage of the yax ant task is designed with the <ulink url="http://ant.apache.org/manual/CoreTasks/style.html">XSLT task</ulink> in mind.
                if you are familiar with the XSLT task you will find some similarities.
                For the determination of single input and output files the attributes
                <emphasis>in</emphasis> and <emphasis>out</emphasis> are used. The attributes
                which holds the script file location is called in the XSLT task <emphasis>style</emphasis>.
                The corresponding attribute in yax is called <emphasis>script</emphasis>.      
              </para>
              <para>
                As the XSLT task do not provide multiple input (and output) yax provides an own
                solution using ant's well known fileset feature in collaboration with the 
                <emphasis>outDir</emphasis> and/or <emphasis>outPattern</emphasis> attributes. 
              </para>
              <para>
                Corresponding to the XSLT task yax also provides passing parameters to 
                the pipeline processor and the used subsystems (as transformers). While these
                parameters are not exclusively passed for the usage in transformers to yax 
                the different name 'property' was used. But these 'properties' will also be passed as
                parameters to the transformers.
              </para>
              <para>
                If you intend to use other xslt processors than the system defualt processor 
                please consider that all necessary libraries must be assigned to the classpath
                BEFORE starting ant. Passing the transformer libraries via ant's classpath features 
                (either within taskdef or with classpathref attribute) do not work.  
              </para>
              
              <programlisting format="linespecific">
...
&lt;target 
  name="runExample1"
  description="transforms an input file with concatenated transformation steps"
  &gt;
  &lt;yax 
    in="examples/example1.xml"
    out="test/example1.output.ant.xml"
    script="examples/example1.xproc"  
    &gt;
  &lt;/yax&gt;
&lt;/target&gt;
...
              </programlisting>
  
           </section>

           <section id="usage.ant.description">
              <title>
                 <phrase lang="en">Description</phrase>
                 
              </title>
              <para>
              </para>

           </section>

           <section id="usage.ant.parameters">
              <title>
                 <phrase lang="en">Parameters</phrase>
                 
              </title>
              <para>
                <table id="ant.parameters.table" frame="all">
                   <title>
                      <phrase lang="en">Features</phrase>
                      
                   </title>
                   <tgroup cols="3">
                      <colspec colnum="1" colname="attribute" colwidth="1*"/>
                      <colspec colnum="2" colname="description" colwidth="1*"/>
                      <colspec colnum="3" colname="required" colwidth="1*"/>
                      <thead>
                         <row>
                            <entry colname="attribute">
                               <para lang="en"><emphasis role="bold">Attribute</emphasis> </para>
                               
                              </entry>    
                        <entry colname="description">    
                           <para lang="en"> <emphasis role="bold">Description</emphasis> </para>    
                               
                        </entry>    
                      <entry colname="required">
                           <para lang="en"> <emphasis role="bold">Required</emphasis> </para>
                           
                        </entry>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry colname="attribute">
                           <para>
                            script
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            name of the XProc script to use - given either relative to the baseURI or as an absolute path.
                           </para>
                           
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            Yes
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            in
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            specifies a single XML document to be treated. Should be used with the out attribute.
                           </para>
                           
                           <para lang="en">
                            for multiple input use a fileset.
                           </para>
                           
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            out
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            specifies the output name for the treated result from the in attribute.
                           </para>
                           
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. Must not be present, when 'in' is not present.
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            force
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            recreates output files, even if they are newer than their corresponding input files or the XProc script.  	
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            outDir
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            use in case of multiple input (via fileset).
                           </para>
                           <para lang="en">
                            specifies the directory where the output files are to write to.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            outPattern
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            use in case of multiple input (via fileset).
                           </para>
                           <para lang="en">
                            specifies how to build the output filename.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            noOutputfile
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            suppresses generation of an outputfile (overrides all other output parameters).
                           </para>
                           <para lang="en">
                            The usage of this parameter makes sense when output is created within the pipeline.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            propertyfile
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            the properties this file contains will be passed to yax for further usage.  
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            baseURI
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            the base directory for all containing steps and containers.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            verbose
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            yax logs verbosely.
                           </para>
                           <para lang="en">
                            For getting these log messages it is required that ant is also started in verbose mode. 
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
                     <row>
                        <entry colname="attribute">
                           <para>
                            quiet
                           </para>
                        </entry>
                        <entry colname="description">
                           <para lang="en">
                            yax only logs errors, warnings and very important informations.
                           </para>
                        </entry>
                        <entry colname="required">
                           <para lang="en">
                            No. 
                           </para>
                           
                        </entry>
                     </row>
              </tbody>
           </tgroup>
        </table>
              </para>

           </section>

           <section id="usage.ant.nestedParameters">
              <title>
                 <phrase lang="en">Parameters specified as nested elements</phrase>
                 
              </title>
              <para>
              </para>

           </section>


           <section id="usage.ant.examples">
              <title>
                 <phrase lang="en">Examples</phrase>
                 
              </title>
              <para>
                see section 'Examples'
              </para>

           </section>
            
         </section>
         <section id="usage.SOAP">
            <title>
               <phrase lang="en">SOAP Interface</phrase>
               
            </title>
            <para lang="en">
               ToDo
            </para>
         </section>
         <section id="usage.pipelineConfig">
            <title>
               <phrase lang="en">The Pipeline Configuration File</phrase>
               
            </title>
            <para lang="en">
               The <emphasis>&lt;pipeline filename&gt;</emphasis>.config.xml
               contains the pipeline with all implicit ports and resulting connections between the ports and all
               used pipeline-library (the actual implementation is handled as serveral libraries):
            </para>
            <programlisting format="linespecific">
               
&lt;yax:configuration xmlns:yax="http://www.opsdesign.eu/yax/1.0"&gt;
&lt;!--configuration description generated by Yax - Do not edit by hand--&gt;
&lt;pipeline name="pipe1"&gt;
..
&lt;step name="trans1"&gt;
&lt;output port="out" sequence="no" yax:creator="implementation.xproc.standard"/&gt;
&lt;input port="in" sequence="no" yax:creator="implementation.xproc.standard"&gt;
&lt;yax:connection port="in" yax:component="pipe1"/&gt;
&lt;/input&gt;
&lt;input port="stylesheet" sequence="no" yax:creator="implementation.xproc.standard"/&gt;
&lt;input href="examples/transformation1.xsl" port="stylesheet" yax:creator="pipeline"/&gt;
&lt;/step&gt;
...
&lt;/pipeline&gt;
&lt;xproc:pipeline-library name="xproc.options" xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"&gt;
&lt;xproc:declare-step-type type="Rename" yax:description=""&gt;
&lt;xproc:output port="out" select="" sequence="no" yax:bySourceRequired="no"/&gt;
&lt;xproc:input port="in" select="" sequence="no" yax:bySourceRequired="no"/&gt;
&lt;xproc:parameter name="name" required="yes" yax:values="{$any}"/&gt;
&lt;xproc:parameter name="select" required="yes" yax:values="{$xpathExpression}"/&gt;
&lt;/xproc:declare-step-type&gt;
...
&lt;/xproc:pipeline-library&gt;
&lt;xproc:pipeline-library name="xproc.standard" xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"&gt;
...
&lt;/xproc:pipeline-library&gt;
&lt;xproc:pipeline-library name="yax.standard" xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"&gt;
...
&lt;/xproc:pipeline-library&gt;
&lt;/yax:configuration&gt;
               
            </programlisting>
         </section>         
         <section id="usage.graphicalOutput">
            <title>
               <phrase lang="en">Graphical Visualization of a Pipeline</phrase>
               
            </title>
            <para lang="en">
               The file <emphasis>&lt;pipeline filename&gt;</emphasis>.pipeTrace.png
               contains the compressed graphical representation of the pipeline. 
               (This file will only generated if the <emphasis>automaticOutput</emphasis> attribut 
               of the <emphasis>&lt;pipetrace&gt;</emphasis> preference is set to 'yes'.)
            </para>
            <figure id="graphicalOutput.pipeTrace.png" float="0">
               <title>
                  <phrase id="graphicalOutput.pipeTrace.png.en" lang="en">Compressed Graphical Representation of the Pipeline 'example1.xproc'</phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/example1.pipeTrace.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/example1.pipeTrace.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>
            <para lang="en">
               By default implicit connections apears in black or in blue color, explicit connections appears in green color.
               You can change the appearance according your needs by setting the appropriate preferences.
               (By change colors keep in mind that default color for errors is red) 
            </para>
            <figure id="graphicalOutput.pipeTraceWithExplicitConnection.png" float="0">
               <title>
                  <phrase id="graphicalOutput.pipeTraceWithExplicitConnection.png.en" lang="en">Pipeline with implicit and explicit connections</phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/openWithLoadAndExplicitConnection.pipeTrace.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/openWithLoadAndExplicitConnection.pipeTrace.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>
            <para lang="en">
               The file <emphasis>&lt;pipeline filename&gt;</emphasis>.portTrace.png
               contains the graphical representation of the pipeline which depicts the 
               expected route the process will take over the ports.
               (This file will only generated if the <emphasis>automaticOutput</emphasis> attribut 
               of the <emphasis>&lt;porttrace&gt;</emphasis> preference is set to 'yes'.)
            </para>
            <figure id="graphicalOutput.portTrace.png" float="0">
               <title>
                  <phrase id="graphicalOutput.portTrace.png.en" lang="en">Compressed Graphical Representation of a Pipeline</phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/example1.portTrace.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/example1.portTrace.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>
         </section>         
         <section id="usage.development">
            <title>
               <phrase lang="en">Design and Setup a Pipeline</phrase>
               
            </title>
            <para lang="en">
               During this phase you can configure what an output you would 
               like to generate when you apply yax to your pipeline 
               by setting the appropriate running parameters.
            </para>
            <para lang="en">
               Use <emphasis>automaticOutput</emphasis> for switch on/off the output of pipeTrace resp. portTrace.
            </para>
            <para lang="en">
               Use <emphasis>suppress</emphasis> for switch on/off the processing of the pipeline.
            </para>
         </section>
         <section id="usage.processing">
            <title>
               <phrase lang="en">run a Pipeline</phrase>
               
            </title>
            <para lang="en"> 
               Analogous to the configuration possibilities depicts in <emphasis>Design and Setup a Pipeline</emphasis> 
               you can  switch off all outputs you don't need.
            </para>
         </section>
         <section id="usage.pipeline">
            <title>
               <phrase lang="en">Using the Construct <emphasis>&lt;p:pipeline&gt;</emphasis></phrase>
               
            </title>
            <para lang="en">
               The <emphasis>&lt;p:pipeline&gt;</emphasis> construct is a container for steps and other
               construct. 
            </para>
            <programlisting format="linespecific">
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="validate1" type="xproc:Validate"/&gt; 
   &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:step name="validate2" type="xproc:Validate"/&gt; 
&lt;/xproc:pipeline&gt;
           </programlisting>
           <figure id="pipeline.pipeTrace.png" float="0">
              <title>
                 <phrase id="pipeline.pipeTrace.en" lang="en">Pipeline</phrase>
                 
              </title>
              <mediaobject>
                 <imageobject role="html">
                    <imagedata fileref="figures/io.closed.pipeTrace.png" format="PNG"/>
                 </imageobject>
                 <imageobject role="fo">
                    <imagedata fileref="figures/io.closed.pipeTrace.png" scale="50" format="PNG"/>
                 </imageobject>
              </mediaobject>
           </figure>
            <para lang="en">
               The most simple pipeline is an empty pipeline:
            </para>
            <programlisting format="linespecific">
&lt;xproc:pipeline name="pipe1" 
    xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
    xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
&lt;/xproc:pipeline&gt;
            
            </programlisting>
            
            <figure id="usage.pipeline.pipeline.empty.png" float="0">
               <title>
                  <phrase id="pipeline.pipeline.empty.png.en" lang="en">Choose/When/Otherwise construct with exlicit ports at <emphasis>choose</emphasis> element</phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/pipeline.empty.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/pipeline.empty.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>
            
            <para lang="en">
               When you run such an empty pipeline you get a message that the pipeline will be bridged. 
               In that case the pipeline construct has the same behaviour as the identity step. 
            </para>
            <programlisting format="linespecific">
            
...
Construct 'pipe1' is empty and will be bridged.
...
            
            </programlisting>
            
            
            <para lang="en">
               pipelines can contain nested components in an arbitrary (??) depth: 
            </para>
            
            <programlisting format="linespecific">
            
&lt;xproc:pipeline name="pipe1" 
    xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
    xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
    &lt;xproc:pipeline name="pipe1.1"&gt;
        &lt;xproc:step name="step1" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="examples/transformation1.xsl"/&gt;
        &lt;/xproc:step&gt;
        &lt;xproc:pipeline name="pipe1.1.1"&gt;
            &lt;xproc:step name="step1" type="xproc:XSLT"&gt;
                &lt;xproc:input port="stylesheet" href="examples/transformation2.xsl"/&gt;
            &lt;/xproc:step&gt;
            &lt;xproc:pipeline name="pipe1.1.1.1"&gt;
                &lt;xproc:step name="step1" type="xproc:XSLT"&gt;
                    &lt;xproc:input port="stylesheet" href="examples/transformation3.xsl"/&gt;
                &lt;/xproc:step&gt;
            &lt;/xproc:pipeline&gt;
        &lt;/xproc:pipeline&gt;
    &lt;/xproc:pipeline&gt;
&lt;/xproc:pipeline&gt;
            
            
            </programlisting>
            
            <figure id="usage.pipeline.pipeline.nestedComponents.png" float="0">
               <title>
                  <phrase id="pipeline.pipeline.nestedComponents.png.en" lang="en">Pipelline with nested Components</phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/pipeline.nestedComponents.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/pipeline.nestedComponents.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>
            
            
         </section>
         
         <section id="usage.XSLT">
            <title>
               <phrase lang="en">Using the Step <emphasis>&lt;p:XSLT&gt;</emphasis></phrase>
               
            </title>
            <para lang="en">
               The usual form of the <emphasis>xproc:XSLT</emphasis> step consists of the <emphasis>&lt;xproc:step&gt;</emphasis> element
               itself which contains an <emphasis>&lt;input&gt;</emphasis> port element. This port refers to the <emphasis>stylesheet</emphasis> port.
            </para>
            <programlisting format="linespecific">
               
&lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
   &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
&lt;/xproc:step&gt;
               
            </programlisting>

            <para lang="en">
               This step uses the default transformer determined by the mechanism described below in this chapter.
               If you would like to use a particular transformer for a step, you can place a parameters:
            </para>
            <programlisting format="linespecific">
               
&lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
  &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
               <emphasis role="bold">&lt;xproc:parameter name="transformer" value="Saxon8"/&gt;</emphasis>
&lt;/xproc:step&gt;
               
            </programlisting>
            
            <para lang="en">
               Currently only the <emphasis>href</emphasis> reference to the source is supported.
            </para>

      <table id="XSLT.exception.table" frame="all">
         <title>
            <phrase lang="en">Exceptions of step <emphasis>&lt;XSLT&gt;</emphasis></phrase>
            
         </title>
         <tgroup cols="2">
            <colspec colnum="1" colname="exception" colwidth="1*"/>
            <colspec colnum="2" colname="annotion" colwidth="1*"/>
            <thead>
               <row>
                  <entry colname="exception">
                     <para lang="en"><emphasis role="bold">Exception</emphasis> </para>
                     
                  </entry>
                  <entry colname="annotation">
                     <para lang="en"> <emphasis role="bold">Annotation</emphasis> </para>
                     
                  </entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry namest="exception" nameend="annotation">
                     <para lang="en"> <emphasis role="bold">trapped during processing</emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="exception">
                    <para> 
                      EmptyResultException
                    </para>
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="exception">
                    <para> 
                      FileNotFoundException
                    </para>
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                      If href is used to reach file and this file can not be found.
                     </para>
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="exception">
                    <para> 
                      TransformerConfiguration
                    </para>
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="exception">
                    <para> 
                      Transformer
                    </para>
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="exception">
                    <para> 
                      DOM
                    </para>
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry namest="exception" nameend="annotation">
                     <para lang="en"> <emphasis role="bold">trapped during transformer determination</emphasis> </para>
                     
                  </entry>
               </row>
               <row>
                  <entry colname="exception">
                    <para> 
                      TransformerConfiguration
                    </para>
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="exception">
                    <para> 
                      Transformer
                    </para>
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                     <para lang="en">
                     </para>
                  </entry>
               </row>
               <row>
                  <entry colname="exception">
                    <para> 
                      DOM
                    </para>
                  </entry>
                  <entry colname="annotation">
                     <para lang="en">
                     </para>
                     <para lang="en">
                     </para>
                  </entry>
               </row>
            </tbody>
         </tgroup>
      </table>

            
            <section id="usage.XSLT.resolveTransformer">
               <title>
                  <phrase lang="en">Determine the desired Transformer</phrase>
                  
               </title>
               <para lang="en"> 
               </para>
               <para lang="en">
                  The step receives the document, which is to treat via the input port and provides the 
                  result of the transformation at the output port.
               </para>
               <para lang="en">
                  It determins the processor according the following mechanism:
                  <itemizedlist>
                     <title>
                        <phrase lang="en">
                           Determination of the appropriate transformation processor
                        </phrase>
                     </title>
                     <para lang="en">
                        There are three ways to determine the processor. 
                        The ways overrides the effects of their ancestors in the sequence of its appearance. 
                        (The numbers 1) and 2) are part of the processor selection mechanism of JAXP. 
                        For further information concerning this mechanism please refer to Suns JAXP documentation.
                        The numbers 3 to 5) all uses the system property mechanism).
                     </para>
                     
                     <listitem>
                        <para lang="en">
                           1) Do nothing
                        </para>
                        <para lang="en">
                           Since Version 1.4 Java contains a default transformation processor (XSLTC).
                           This processor will be used if no other processors are visible (in the classpath).
                        </para>
                     </listitem>
                     <listitem>
                        <para lang="en">
                           2) Set the desired processor in the classpath
                        </para>
                        <para lang="en">
                           JAXP uses the first first processor (precise: TransformerFactory) found in the classpath.
                        </para>
                     </listitem>
                     <listitem>
                        <para lang="en">
                           3) Set the desired processor with the system property 'javax.xml.transform.TransformerFactory'
                           JAXP uses the transformer implementation mentioned in this system property.
                        </para>
                        <para lang="en">
                        </para>
                     </listitem>
                     <listitem>
                        <para lang="en">
                           4) Set a default transformer within the yax preferences
                        </para>
                        <para lang="en">
                           Within the yax preferences file &lt;yax-installation-directory&gt;/config/preferences.xml you will
                           find an element called &lt;transformers&gt;. It contains a (customizable) list of elements for each tranformer
                           which shall be reachable by yax.
                           You can insert a 'default' attribute into the &lt;transformers&gt; element with the name
                           of the transformer which should become default processor. The value has to point
                           to an existant &lt;transformer&gt; element.
                        </para>
                     </listitem>
                     <listitem>
                        <para lang="en">
                           5) Set the tranformer individually for a step
                        </para>
                        <para lang="en">
                           You can choose a particual transformer for each step by using the parameter:
                           &lt;xproc:parameter name="transformer" value="saxon8" /&gt;
                           The value of this parameter has to point to an existant &lt;transformer&gt; element in the yax preferences file.  
                        </para>
                     </listitem>
                  </itemizedlist>
               </para>
            </section>
            
         </section>
         <section id="usage.XInclude">
            <title>
               <phrase lang="en">Using the Step <emphasis>&lt;p:XInclude&gt;</emphasis></phrase>
               
            </title>
            <para lang="en">
               XInclude resolves the <emphasis>&lt;xi:include&gt;</emphasis> entry of the treated document. 
               You simply post the <emphasis>&lt;p:XInclude&gt;</emphasis> step somewhere in the processing stream and
               <emphasis>&lt;xi:include&gt;</emphasis> entries contained in content will be replaced by the 
               staff the <emphasis>&lt;xi:include&gt;</emphasis> entry is referring to.
            </para>
            <programlisting format="linespecific">
               
...
&lt;xproc:step name="XInclude1" type="xproc:XInclude"/&gt; 
...
               
            </programlisting>
            
            <figure id="usage.XInclude.png" float="0">
               <title>
                  <phrase id="XInclude.png.en" lang="en"><emphasis>&lt;p:XInclude&gt;</emphasis></phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/XInclude.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/XInclude.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>
            
         </section>
         
         <section id="usage.Load">
            <title>
               <phrase lang="en">Using the Step <emphasis>&lt;p:Load&gt;</emphasis></phrase>
               
            </title>
            <para lang="en">
               <emphasis>&lt;p:Load&gt;</emphasis> loads an XML Document from an external data source.
               <emphasis>&lt;p:Load&gt;</emphasis> references the source via an URI which is placed
               either in an <emphasis>href</emphasis> attribute or (as requested from the specification) parameter with the name <emphasis>href</emphasis>. 
            </para>
            <programlisting format="linespecific">
               
...
&lt;xproc:step name="Load1" type="xproc:Load" href="examples/example1.xml"/&gt; 
...
               
            </programlisting>

            <figure id="usage.Load.png" float="0">
               <title>
                  <phrase id="Load.png.en" lang="en"><emphasis>&lt;p:Load&gt;</emphasis></phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/Load.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/Load.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>

            <para lang="en">
               In comparision to other steps at <emphasis>&lt;p:Load&gt;</emphasis> the <emphasis>input</emphasis> port is replaced
               by an external content source. The consequence is a break of the pipeline chain at this point. 
               That means that the content at the <emphasis>result</emphasis> port of the preceding component of of the <emphasis>&lt;p:Load&gt;</emphasis> step
               will be discarded except other components refer to it explicitly.       
            </para>

            <para lang="en">
               <emphasis>&lt;p:Load&gt;</emphasis> can be used to replace the initial content load 
               via the input file start paramter. So with <emphasis>&lt;p:Load&gt;</emphasis> you can
               place the reference to input data into the pipeline and can access yax with a single 
               reference to location of the pipeline document.         
            </para>

            <programlisting format="linespecific">
# java -classpath lib/yax-0.7.jar net.sf.yax.Yax [options]<emphasis>pipeline file location</emphasis>
            </programlisting>
            
            <para lang="en">
              you can use parameter references with the form <emphasis>${&lt;parameter name&gt;}</emphasis>
              within <emphasis>href</emphasis> attribute (or parameter).
              This reference will be replaced by the value of parameter with the same name passed either by
              property file or by start parameter ('-D&lt;parameter name&gt;').
            </para>

            <para lang="en">
              With a combination of start parameter and parameter references within the xproc script you can
              build your scripts in a more flexible way. Example:
            </para>

            <programlisting format="linespecific">
# java -classpath lib/yax-0.7.jar 
       net.sf.yax.Yax 
       -Dexample.dir=examples 
       -Dtest.dir=test 
       -DoutputFilename=output1.xml 
       example1.xproc
            </programlisting>

            <programlisting format="linespecific">
&lt;xproc:pipeline name="pipe1" 
    xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
    xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
    &lt;xproc:step name="Load1" type="xproc:Load" href="${examples.dir}/${inputFilename}"/&gt;
    &lt;xproc:step name="Store1" type="xproc:Store" href="${test.dir}/${outputFilename}"/&gt;
&lt;/xproc:pipeline&gt;
            </programlisting>

         </section>
         
         <section id="usage.Store">
            <title>
               <phrase lang="en">Using the Step <emphasis>&lt;p:Store&gt;</emphasis></phrase>
               
            </title>
            <para lang="en">
               <emphasis>&lt;p:Store&gt;</emphasis> stores an XML Document at external data target location.
               <emphasis>&lt;p:Store&gt;</emphasis> references the target location via an URI which is placed
               either in an <emphasis>href</emphasis> attribute or (as requested from the specification) parameter with the name <emphasis>href</emphasis>. 
            </para>
            <programlisting format="linespecific">
               
...
&lt;xproc:step name="Store1" type="xproc:Store" href="examples/output.xml"/&gt; 
...
               
            </programlisting>

            <figure id="usage.Store.png" float="0">
               <title>
                  <phrase id="Store.png.en" lang="en"><emphasis>&lt;p:Store&gt;</emphasis></phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/Store.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/Store.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>

            <para lang="en">
               In comparision to other steps at <emphasis>&lt;p:Load&gt;</emphasis> the <emphasis>input</emphasis> port is replaced
               by an external content source. The consequence is a break of the pipeline chain at this point. 
               That means that the content at the <emphasis>result</emphasis> port of the preceding component of of the <emphasis>&lt;p:Load&gt;</emphasis> step
               will be discarded except other components refer to it explicitly.       
            </para>

            <para lang="en">
               <emphasis>&lt;p:Load&gt;</emphasis> can be used to replace the initial content load 
               via the input file start paramter. So with <emphasis>&lt;p:Load&gt;</emphasis> you can
               place the reference to input data into the pipeline and can access yax with a single 
               reference to location of the pipeline document.         
            </para>

            <programlisting format="linespecific">
# java -classpath lib/yax-0.7.jar net.sf.yax.Yax [options]<emphasis>pipeline file location</emphasis>
            </programlisting>
            
            <para lang="en">
              you can use parameter references with the form <emphasis>${&lt;parameter name&gt;}</emphasis>
              within <emphasis>href</emphasis> attribute (or parameter).
              This reference will be replaced by the value of parameter with the same name passed either by
              property file or by start parameter ('-D&lt;parameter name&gt;').
            </para>

            <para lang="en">
              With a combination of start parameter and parameter references within the xproc script you can
              build your scripts in a more flexible way. Example:
            </para>

            <programlisting format="linespecific">
# java -classpath lib/yax-0.7.jar 
       net.sf.yax.Yax 
       -Dexample.dir=examples 
       -Dtest.dir=test 
       -DoutputFilename=output1.xml 
       example1.xproc
            </programlisting>

            <programlisting format="linespecific">
&lt;xproc:pipeline name="pipe1" 
    xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
    xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
    &lt;xproc:step name="Load1" type="xproc:Load" href="${examples.dir}/${inputFilename}"/&gt;
    &lt;xproc:step name="Store1" type="xproc:Store" href="${test.dir}/${outputFilename}"/&gt;
&lt;/xproc:pipeline&gt;
            </programlisting>

         </section>

         <section id="usage.fop">
            <title>
               <phrase lang="en">Using the Step <emphasis>&lt;p:Fop&gt;</emphasis> for creating PDF files</phrase>
               
            </title>
            <para lang="en">
              For using FOP you need FOP is installed on your system and the FOP libraries are part of your classpath. 
            </para>
            <para lang="en">
              At the moment <emphasis>&lt;p:Fop&gt;</emphasis> and <emphasis>&lt;p:PDF&gt;</emphasis> can be used either without any difference.
              <emphasis>&lt;p:PDF&gt;</emphasis> is previewed for future time when other fo processors are accessable by yax.
              In the meantime <emphasis>&lt;p:Fop&gt;</emphasis> and <emphasis>&lt;p:PDF&gt;</emphasis> are used as synomyms. 
            </para>
            <programlisting format="linespecific">
               
...
&lt;xproc:step name="write pdf" type="xproc:Fop"/&gt; 
...
               
            </programlisting>
            
            <figure id="usage.pdf.png" float="0">
               <title>
                  <phrase id="pdf.png.en" lang="en"><emphasis>&lt;p:XInclude&gt;</emphasis></phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/pdf.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/pdf.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>

            <para lang="en">
              As you can see in the graphic the fop step requires XML-FO as input.
            </para>
            
         </section>

         
         <section id="usage.choose">
            <title>
               <phrase lang="en">Using the Construct <emphasis>&lt;p:choose&gt;</emphasis>/<emphasis>&lt;p:when&gt;</emphasis>/<emphasis>&lt;p:otherwise&gt;</emphasis></phrase>
               
            </title>
            <para lang="en">
               The usual case using a <emphasis>choose/when/otherwise</emphasis> construct will be
               that you define only one reference source (at the <emphasis>choose</emphasis> element) and 
               applies the test clause of all <emphasis>&lt;when&gt;</emphasis> elements on it:
             </para>

            <programlisting format="linespecific">
               
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:choose name="choose1" type="xproc:XSLT"&gt;
      <emphasis role="bold">&lt;xproc:input port="ref" href="test/chooseInput0.xml"/&gt;</emphasis>
      &lt;xproc:when name="when1" test="/test1"&gt;
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;
      &lt;/xproc:when&gt;
      &lt;xproc:when name="when2" test="/test2"&gt;
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;            
      &lt;/xproc:when&gt;
      &lt;xproc:otherwise name="otherwise"&gt;
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;
      &lt;/xproc:otherwise&gt;
   &lt;/xproc:choose&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
   &lt;/xproc:step&gt;
&lt;/xproc:pipeline&gt;
                                             
            </programlisting>


            <figure id="usage.choose.portAtChoose.png" float="0">
               <title>
                  <phrase id="choose.portAtChoose.png.en" lang="en">Choose/When/Otherwise construct with exlicit ports at <emphasis>choose</emphasis> element</phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/choose.portAtChoose.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/choose.portAtChoose.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>
            
            <programlisting format="linespecific">

               
            </programlisting>

            <para lang="en">
               Also it is possible to define a reference source for each <emphasis>when</emphasis> clause:
            </para>
            
            <programlisting format="linespecific">
               
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:choose name="choose1" type="xproc:XSLT"&gt;
      &lt;xproc:when name="when1" test="/test1"&gt;
         <emphasis role="bold">&lt;xproc:input port="ref" href="test/chooseInput1.xml"/&gt;</emphasis>
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;
      &lt;/xproc:when&gt;
      &lt;xproc:when name="when2" test="/test2"&gt;
         <emphasis role="bold">&lt;xproc:input port="ref" href="test/chooseInput2.xml"/&gt;</emphasis>
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;            
      &lt;/xproc:when&gt;
      &lt;xproc:otherwise name="otherwise"&gt;
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;
      &lt;/xproc:otherwise&gt;
   &lt;/xproc:choose&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
   &lt;/xproc:step&gt;
&lt;/xproc:pipeline&gt;
                                             
            </programlisting>

            <figure id="usage.choose.portAtAllWhen.png" float="0">
               <title>
                  <phrase id="choose.portAtAllWhen.png.en" lang="en">Choose/When/Otherwise construct with exlicit ports at all <emphasis>when</emphasis> elements</phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/choose.portAtAllWhen.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/choose.portAtAllWhen.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>
                                                
            <para lang="en">
               If you do not define at least one reference port: 
            </para>
            
            <programlisting format="linespecific">
               
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
   &lt;/xproc:step&gt;
   &lt;xproc:choose name="choose1" type="xproc:XSLT"&gt;
      <emphasis role="bold">&lt;xproc:input port="ref" href="test/chooseInput0.xml"/&gt;</emphasis>
      &lt;xproc:when name="when1" test="/test1"&gt;
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;
      &lt;/xproc:when&gt;
      &lt;xproc:when name="when2" test="/test2"&gt;
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;            
      &lt;/xproc:when&gt;
      &lt;xproc:otherwise name="otherwise"&gt;
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;
      &lt;/xproc:otherwise&gt;
   &lt;/xproc:choose&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
   &lt;/xproc:step&gt;
&lt;/xproc:pipeline&gt;
                                             
            </programlisting>
            
            <figure id="usage.choose.noPort.png" float="0">
               <title>
                  <phrase id="choose.noPort.png.en" lang="en">Choose/When/Otherwise construct with exlicit ports at all elements</phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/choose.noPort.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/choose.noPort.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>

            <para lang="en">
               triggers an error message at the first <emphasis>when</emphasis> element:
            </para>
            
            <programlisting format="linespecific">

<emphasis role="bold">construct 'when1': reference port not found.</emphasis>
               
            </programlisting>
            
            <para lang="en">
               You can also equip all elements of the <emphasis>choose/when/otherwise</emphasis> construct
               simultaniously with a reference port. In that case the reference port of the <emphasis>choose</emphasis> element
               triggers the generation of an implicit reference port at each <emphasis>when</emphasis> element.
               But the implicit reference ports take no effect because explicit ports always have priority.
               They regain effect when the explicit ports will be (also partitially) erased.
            </para>
            
            <programlisting format="linespecific">
               
&lt;xproc:pipeline name="pipe1" 
   xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
   xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
   &lt;xproc:step name="trans1" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation1.xsl"/&gt; 
   &lt;/xproc:step&gt;
   &lt;xproc:choose name="choose1" type="xproc:XSLT"&gt;
      <emphasis role="bold">&lt;xproc:input port="ref" href="test/chooseInput0.xml"/&gt;</emphasis>
      &lt;xproc:when name="when1" test="/test1"&gt;
         <emphasis role="bold">&lt;xproc:input port="ref" href="test/chooseInput1.xml"/&gt;</emphasis>
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;
      &lt;/xproc:when&gt;
      &lt;xproc:when name="when2" test="/test2"&gt;
         <emphasis role="bold">&lt;xproc:input port="ref" href="test/chooseInput2.xml"/&gt;</emphasis>
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;            
      &lt;/xproc:when&gt;
      &lt;xproc:otherwise name="otherwise"&gt;
         &lt;xproc:step name="trans2" type="xproc:XSLT"&gt;
            &lt;xproc:input port="stylesheet" href="test/transformation2.xsl"/&gt; 
         &lt;/xproc:step&gt;
      &lt;/xproc:otherwise&gt;
   &lt;/xproc:choose&gt;
   &lt;xproc:step name="trans3" type="xproc:XSLT"&gt;
      &lt;xproc:input port="stylesheet" href="test/transformation3.xsl"/&gt; 
   &lt;/xproc:step&gt;
&lt;/xproc:pipeline&gt;
                                             
            </programlisting>
            
            <figure id="usage.choose.portAtAll.png" float="0">
               <title>
                  <phrase id="choose.portAtAll.png.en" lang="en">Choose/When/Otherwise construct with exlicit ports at all elements</phrase>
                  
               </title>
               <mediaobject>
                  <imageobject role="html">
                     <imagedata fileref="figures/choose.portAtAll.png" format="PNG"/>
                  </imageobject>
                  <imageobject role="fo">
                     <imagedata fileref="figures/choose.portAtAll.png" scale="50" format="PNG"/>
                  </imageobject>
               </mediaobject>
            </figure>
            
            <programlisting format="linespecific">


            </programlisting>
            
            
            </section>
               <section id="usage.try">
                  <title>
                     <phrase lang="en">Using the Construct <emphasis>&lt;p:try&gt;</emphasis>/<emphasis>&lt;p:catch&gt;</emphasis></phrase>
                     
                  </title>
                  <para lang="en">
                     You can use the <emphasis>&lt;p:try&gt;</emphasis>/<emphasis>&lt;p:catch&gt;</emphasis> construct either with 
                     only a general catch clause: 
                   </para>
      
                  <programlisting format="linespecific">

&lt;xproc:pipeline name="pipe1" 
    xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
    xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
    &lt;xproc:try name="try1"&gt;
        &lt;xproc:group name="group1"&gt;
            &lt;xproc:step name="group1step1" type="xproc:XSLT"&gt;
                &lt;xproc:input port="stylesheet" href="examples/transformation2.xsl"/&gt;
            &lt;/xproc:step&gt;
        &lt;/xproc:group&gt;
        &lt;xproc:catch name="catch"&gt;
            &lt;xproc:step name="catchstep2" type="xproc:XSLT"&gt;
                &lt;xproc:input port="stylesheet" href="examples/transformation1.xsl"/&gt;
            &lt;/xproc:step&gt;
        &lt;/xproc:catch&gt;
    &lt;/xproc:try&gt;
&lt;/xproc:pipeline&gt;
                                             
                  </programlisting>
      
      
                  <figure id="usage.try.oneCatch.png" float="0">
                     <title>
                        <phrase id="try.oneCatch.png.en" lang="en">Try/Catch construct with a single catch clause<emphasis>choose</emphasis> element</phrase>
                        
                     </title>
                     <mediaobject>
                        <imageobject role="html">
                           <imagedata fileref="figures/try.oneCatch.png" format="PNG"/>
                        </imageobject>
                        <imageobject role="fo">
                           <imagedata fileref="figures/try.oneCatch.png" scale="50" format="PNG"/>
                        </imageobject>
                     </mediaobject>
                  </figure>
      
                  <para lang="en">
                     or more sophiticated with additional differenciating catch clauses:
                  </para>
                  
                  <programlisting format="linespecific">

&lt;xproc:pipeline name="pipe1" 
    xmlns:xproc="http://www.w3.org/TR/2006/xproc/1.0"
    xmlns:yax="http://opsdesign.eu/yax/1.0"&gt;
    &lt;xproc:try name="try1"&gt;
        &lt;xproc:group name="group1"&gt;
            &lt;xproc:step name="group1step1" type="xproc:XSLT"&gt;
                &lt;xproc:input port="stylesheet" href="examples/transformation2.xsl"/&gt;
            &lt;/xproc:step&gt;
        &lt;/xproc:group&gt;
        &lt;xproc:catch name="catch1" exception="EmptyResult"&gt;
            &lt;xproc:step name="catch1step2" type="xproc:XSLT"&gt;
                &lt;xproc:input port="stylesheet" href="examples/transformation1.xsl"/&gt;
            &lt;/xproc:step&gt;
        &lt;/xproc:catch&gt;
        &lt;xproc:catch name="catch2" exception="FileNotFound"&gt;
            &lt;xproc:step name="catch2step2" type="xproc:XSLT"&gt;
                &lt;xproc:input port="stylesheet" href="examples/transformation1.xsl"/&gt;
            &lt;/xproc:step&gt;
        &lt;/xproc:catch&gt;
        &lt;xproc:catch name="catch"&gt;
            &lt;xproc:step name="catchstep2" type="xproc:XSLT"&gt;
                &lt;xproc:input port="stylesheet" href="examples/transformation1.xsl"/&gt;
            &lt;/xproc:step&gt;
        &lt;/xproc:catch&gt;
    &lt;/xproc:try&gt;
&lt;/xproc:pipeline&gt;
                                             
                  </programlisting>
      
      
                  <figure id="usage.try.multiCatch.png" float="0">
                     <title>
                        <phrase id="try.multiCatch.png.en" lang="en">Try/Catch construct with a single catch clause<emphasis>choose</emphasis> element</phrase>
                        
                     </title>
                     <mediaobject>
                        <imageobject role="html">
                           <imagedata fileref="figures/try.multiCatch.png" format="PNG"/>
                        </imageobject>
                        <imageobject role="fo">
                           <imagedata fileref="figures/try.multiCatch.png" scale="50" format="PNG"/>
                        </imageobject>
                     </mediaobject>
                  </figure>
                  
                  <para lang="en">
                     How ever, each <emphasis>&lt;p:try&gt;</emphasis>/<emphasis>&lt;p:catch&gt;</emphasis> construct has to contain at least
                     the general catch clause.  
                  </para>

             </section>
         </section>
   </section>
   <section id="roadmap">
      <title>
         <phrase lang="en">Roadmap</phrase>
         
      </title>
      <para lang="en"> Description ToDo </para>
      
   </section>
   <section id="examples">
      <title>
         <phrase lang="en">Examples</phrase>
         
      </title>
      <section id="examples.overview">
         <title>
            <phrase lang="en">Overview</phrase>
            
         </title>
         <para lang="en">
           In the following you find several examples which depicts what features yax provides and how to achieve to make them run.
           For your confinience the start of all examples are assembled in the ant script 'runExamplesViaAnt.xml'.
           You find this file in the root of YAX_HOME.
           If you prefer to run yax from the command line you can find some 'runExample*.bat' files also at root of YAX_HOME.  
         </para>
         
      </section>
      <section id="example.concatenatedTransformations">
         <title>
            <phrase lang="en">Example 1.1 - Concatenated Transformations</phrase>
            
         </title>
         <para lang="en"> Demonstrates a usual xml pipeline consisting of some concatenated transformation steps.</para>
         
      </section>
      <section id="example.concatenatedTransformationsWithCatalog">
         <title>
            <phrase lang="en">Example 1.2 - Concatenated Transformations (using an xml catalog)</phrase>
            
         </title>
         <para lang="en"> Demonstrates alike Example 1.1. a usual xml pipeline consisting of some concatenated transformation. Supplementally resolves all URIs against an xml catalog.</para>
         
      </section>
      <section id="example.xinclude">
         <title>
            <phrase lang="en">Example 2.1. - <emphasis>&lt;p:XInclude&gt;</emphasis> in Action (resolves Xinclude entries)</phrase>
            
         </title>
          <para>
            This is an example with real data coming from the <ulink url="http://docbooksml/sourceforge.net/">docbook.sml project</ulink>.
            It collects all sections distributed over several files into the output file.
            Start yax with: 
         </para>
         <programlisting format="linespecific">
# java -classpath lib/yax-0.7.jar 
       net.sf.yax.Yax 
       -Dparam1=passedFromProgramStart 
       example7.xproc
       examples/xincludeArticle.xml
       test/output1.xml
         </programlisting>
      </section>
      <section id="example.xincludeWithCatalog">
         <title>
            <phrase lang="en">Example 2.1. - <emphasis>&lt;p:XInclude&gt;</emphasis> in Action (resolves Xinclude entries using an xml catalog))</phrase>
            
         </title>
         <para lang="en"> Demonstrates alike Example 2.1. the usage of <emphasis>&lt;p:XInclude&gt;</emphasis>. Supplementally resolves all URIs against an xml catalog.</para>
      </section>
      <section id="example.chooseProcessWhen">
         <title>
            <phrase lang="en">Example 3.1 - <emphasis>&lt;p:try&gt;/&lt;p:group&gt;/&lt;p:catch&gt;</emphasis> in Action ('choose' finds and processes a valid when clause)</phrase>
            
         </title>
         <para lang="en">'choose' finds and processes a valid when clause. (when clauses overrides with own ref ports the super ref port of choose.)</para>
         
      </section>
      <section id="example.chooseProcessOtherwise">
         <title>
            <phrase lang="en">Example 3.2 - <emphasis>&lt;p:try&gt;/&lt;p:group&gt;/&lt;p:catch&gt;</emphasis> in Action ('choose' processes otherwise clause due to no when clause is valid)</phrase>
            
         </title>
         <para lang="en">'choose' processes otherwise clause due to no when clause is valid. (when clauses have no own ref ports, so uses the super ref port of choose.)</para>
         
      </section>
      <section id="example.tryGeneralCatch">
         <title>
            <phrase lang="en">Example 4.1 - <emphasis>&lt;p:Load&gt;/&lt;p:XInclude&gt;/&lt;p:Store&gt;</emphasis> in Action (processing a general catch clause)</phrase>
            
         </title>
         <para lang="en">'try' detectes an exception and processes the (general) catch clause</para>
         
      </section>
      <section id="example.tryParticularCatch">
         <title>
            <phrase lang="en">Example 4.2 - <emphasis>&lt;p:Load&gt;/&lt;p:XInclude&gt;/&lt;p:Store&gt;</emphasis> in Action (processong a particular catch clause)</phrase>
            
         </title>
         <para lang="en">'try' detectes an exception and processes a particular catch clause</para>
         
      </section>
      <section id="example.innerAndOuterIO">
         <title>
            <phrase lang="en">Example 5.1 - Using Inner and Outer I/O together</phrase>
            
         </title>
         <para lang="en"> ToDo </para>
         
      </section>
      <section id="example.onlyInnerIO">
         <title>
            <phrase lang="en">Example 5.2 - Using only Inner I/O</phrase>
            
         </title>
         <para lang="en"> ToDo </para>
         
      </section>
      <section id="example.parameterToXSLT">
         <title>
            <phrase lang="en">Example 6 - Passing (substituted) Transformation Parameter to <emphasis>&lt;p:XSLT&gt;</emphasis></phrase>
            
         </title>
         <para>
          This examples shows how to
         </para>
          <itemizedlist>
            <listitem>
              <para>
                pass a parameter from the program start through the xproc script to the xsl script (param1)
              </para>
            </listitem>
            <listitem>
              <para>
                pass a parameter from xproc script to the xsl script (param2)
              </para>
            </listitem>
            <listitem>
              <para>
                use parameters default value because nothing passed to (param3)
              </para>
            </listitem>
          </itemizedlist>
          <para>
            Start yax with: 
         </para>
         <programlisting format="linespecific">
# java -classpath lib/yax-0.7.jar 
       net.sf.yax.Yax 
       -Dparam1=passedFromProgramStart 
       example6.xproc
       examples/example1.xml
       test/output1.xml
         </programlisting>
          <para>
            The output file test/output1.xml will consist of: 
         </para>
	       <programlisting format="linespecific">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;result&gt;
    &lt;param1&gt;passedFromProgramStart&lt;/param1&gt;
    &lt;param2&gt;${param2}&lt;/param2&gt;
    &lt;param3&gt;notPassedToScript&lt;/param3&gt;
&lt;/result&gt;
         </programlisting>
          <para>
            Consider that param1 comes from program start, 
            param2 comes (staticly) from xproc script and 
            param3 is the default value from the xsl script. 
         </para>
      </section>
      <section id="example.multipleInputs">
         <title>
            <phrase lang="en">Example 7 - processing multiple input documents</phrase>
            
         </title>
         <para lang="en">applies an xproc script on multiple input documents</para>
         
      </section>
      <section id="example.fop">
         <title>
            <phrase lang="en">Example 8 - <emphasis>&lt;p:PDF&gt;/&lt;p:FOP&gt;</emphasis> in Action (creating a PDF file)</phrase>
            
         </title>
         <para lang="en">creates a PDF-File from an XML-FO file.</para>
         
      </section>
   </section>
   <section id="tutorial">
      <title>
         <phrase lang="en">Tutorial</phrase>
         
      </title>
      <section id="tutorial.simplePipeline">
         <title>
            <phrase lang="en">A simple Pipeline</phrase>
            
         </title>
         <para lang="en"> ToDo </para>
         
      </section>
      <section id="tutorial.additionalOutput">
         <title>
            <phrase lang="en">A Pipeline with additional Output</phrase>
            
         </title>
         <para lang="en"> ToDo </para>
         
      </section>
      <section id="tutorial.additionalInput">
         <title>
            <phrase lang="en">A Pipeline with additional Input</phrase>
            
         </title>
         <para lang="en"> ToDo </para>
         
      </section>
      <section id="tutorial.switchingComponents">
         <title>
            <phrase lang="en">A Pipeline with Choose/When/Otherwise and Try/Catch</phrase>
            
         </title>
         <para lang="en"> ToDo </para>
         
      </section>
   </section>
   <section id="links">
      <title>
         <phrase lang="en">Links</phrase>
         
      </title>
      <para lang="en"> Description ToDo </para>
      
   </section>
   <section id="legal">
      <title>
         <phrase lang="en">Legal Notice</phrase>
         
      </title>
      <para lang="en">Software and documentation is released under the terms of the GNU LGPL license
         (see <ulink url="http://www.gnu.org/copyleft/lesser.html">http://www.gnu.org/copyleft/lesser.html</ulink>) and comes without a warranty of any
         kind.</para>
      
      <para>Copyright © 2006 - 2008 <ulink url="mailto:joerg.moebius@opsdesign.de">joerg.moebius@opsdesign.de</ulink>
      </para>
   </section>
   <section id="poweredBy">
      <title>Powered by</title>
      <para>
         <ulink url="http://sourceforge.net">
            <inlinemediaobject>
               <imageobject role="html">
                  <imagedata fileref="figures/sflogo.php.png" format="PNG"/>
               </imageobject>
               <imageobject role="fo">
                  <imagedata fileref="figures/sflogo.php.png" scale="50" format="PNG"/>
               </imageobject>
               <textobject>
                  <phrase>sourceforge logo</phrase>
               </textobject>
            </inlinemediaobject>
         </ulink>
      </para>
      <para>
         <ulink url="http://docbook.sourceforge.net/">
            <inlinemediaobject>
               <imageobject role="html">
                  <imagedata fileref="figures/docbook-website-logo.png" format="PNG"/>
               </imageobject>
               <imageobject role="fo">
                  <imagedata fileref="figures/docbook-website-logo.png" scale="50" format="PNG"/>
               </imageobject>
               <textobject>
                  <phrase>sourceforge logo</phrase>
               </textobject>
            </inlinemediaobject>
         </ulink>
      </para>
      <para>
         <ulink url="http://xmlgraphics.apache.org/fop//">
            <inlinemediaobject>
               <imageobject role="html">
                  <imagedata fileref="figures/apache-fop-logo.jpg" format="JPG"/>
               </imageobject>
               <imageobject role="fo">
                  <imagedata fileref="figures/apache-fop-logo.jpg" scale="50" format="JPG"/>
               </imageobject>
               <textobject>
                  <phrase>sourceforge logo</phrase>
               </textobject>
            </inlinemediaobject>
         </ulink>
      </para>
      <para>
         <ulink url="http://www.saxonica.com/index.html">
            <inlinemediaobject>
               <imageobject role="html">
                  <imagedata fileref="figures/saxonica_logo.gif" format="GIF"/>
               </imageobject>
               <imageobject role="fo">
                  <imagedata fileref="figures/saxonica_logo.gif" scale="50" format="GIF"/>
               </imageobject>
               <textobject>
                  <phrase>sourceforge logo</phrase>
               </textobject>
            </inlinemediaobject>
         </ulink>
      </para>
   </section>
</article>